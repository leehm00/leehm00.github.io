<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis哨兵sentinel</title>
      <link href="/2022/01/27/redis-shao-bing-sentinel/"/>
      <url>/2022/01/27/redis-shao-bing-sentinel/</url>
      
        <content type="html"><![CDATA[<h2 id="哨兵Sentinel"><a href="#哨兵Sentinel" class="headerlink" title="哨兵Sentinel"></a>哨兵Sentinel</h2><p>Sentinel节点本质上是一个特殊的Redis节点</p><p>它可以监视任意多个主服务器以及这些主服务器属下的所有从服务器，并在被监视的主服务器进人下线状态时(根据ping的时间间隔判断是否是下线了)， 自动将下线主服务器属下的某个从服务器升级为新的主服务器， 然后由新的主服务器代替已下线的主服务器继续处理命令请求  </p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211119220249825.png" alt="image-20211119220249825"></p><p>当 serverl 的下线时长超过用户设定的下线时长上限时， Sentinel 系统就会对server1 执行故障转移操作：</p><ul><li>首先， Sentinel 系统会挑选 server1属下的其中一个从服务器， 并将这个被选中的从服务器升级为新的主服务器。  </li><li>之后， Sentinel 系统会向 serverl 属下的所有从服务器发送新的复制指令， 让它们成为新的主服务器的从服务器， 当所有从服务器都开始复制新的主服务器时， 故障转移操作执行完毕。</li><li>另外， Sentinel 还会继续监视已下线的 serverl， 并在它重新上线时， 将它设置为新的主服务器的从服务器。  </li></ul><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211119220709722.png" alt="image-20211119220709722"></p><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><p>每个Sentinel实例会维护与所监测的主从实例之间的两个连接，分别是命令连接（Command Connection）和发布/订阅连接（Pub/Sub Connection）。但是<strong>Sentinel和其他Sentinel之间只有一个命令连接</strong>。</p><h4 id="命令连接"><a href="#命令连接" class="headerlink" title="命令连接"></a>命令连接</h4><p>Sentinel维护命令连接是为了与其他主从实例以及Sentinel实例通过发送接收命令的方式进行通信</p><p>作用包括：</p><ol><li>Sentinel会默认以每1s间隔发送PING 命令给其他实例以主观判断其他实例是否下线。</li><li>Sentinel会通过Sentinel和主实例之间的命令连接每隔10s发送INFO命令给主从实例以得到主实例和从实例的最新信息。</li><li>在主实例下线的情况下，Sentinel会通过Sentinel和从实例的命令连接发送SLAVEOF NO ONE命令给选定的从实例从而使从实例提升为新的主节点。</li><li>Sentinel会默认每隔1s发送is-master-down-by-addr命令以询问其他Sentinel节点关于监控的主节点是否下线。</li></ol><p>实现函数sentinel.c/sentinelReconnectInstance</p><h4 id="发布-订阅连接"><a href="#发布-订阅连接" class="headerlink" title="发布/订阅连接"></a>发布/订阅连接</h4><p>Sentinel维护和其他主从节点的发布/订阅连接作用是为了获知其他监控相同主从实例的Sentinel实例的存在，并且从其他Sentinel实例中更新对所监控的主从实例以及发送的Sentinel实例的认知。例如在故障转移完成后，其他Sentinel通过读取领头Sentinel的频道消息来更新新的主节点的相关信息（地址，端口号等）。</p><p>Sentinel在默认每隔2秒钟会发送Hello消息包到其对应的主从实例的_<em>sentinel</em>_:hello频道中。Hello消息格式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">__sentinel__:hello <span class="token operator">&lt;</span>sentinel地址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel端口号<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel运行id<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel配置纪元<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点名字 <span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点地址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点端口号<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点配置纪元<span class="token operator">&gt;</span></code></pre><p>当Sentinel通过订阅连接收到其他Sentinel发送的的Hello包时，会更新对主从节点以及发送Sentinel的实例，如果收到自己发送的Hello包，则简单的丢弃不做任何处理。</p><p>处理hello信息实现函数sentinel.c/sentinelProcessHelloMessage</p><p>发布/订阅连接实现函数sentinel.c/sentinelReconnectInstance</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>sentinel本质是一个特殊模式的redis的服务器，代码的入口一样位于server.c/main函数</p><p>与普通的节点有不同:</p><p>**sertinet.c/initSentinelConfig()**函数将会覆盖普通redis服务器的一些默认配置</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 此函数用于设置Sentinel的默认值 * 覆盖普通redis config默认值。 */</span> <span class="token comment">/* This function overwrites a few normal Redis config default with Sentinel * specific defaults. */</span><span class="token keyword">void</span> <span class="token function">initSentinelConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//使用26379作为sentinel的默认端口</span>    server<span class="token punctuation">.</span>port <span class="token operator">=</span> REDIS_SENTINEL_PORT<span class="token punctuation">;</span>     server<span class="token punctuation">.</span>protected_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* Sentinel must be exposed. */</span><span class="token punctuation">}</span></code></pre><p>使用<strong>sentinel.c/sentinelcmds</strong>作为sentinel的命令表</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//sentinel 模块初始化</span><span class="token comment">/* Perform the Sentinel mode initialization. */</span><span class="token keyword">void</span> <span class="token function">initSentinel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>     <span class="token comment">// 清空常用命令；只添加sentinel 命令</span>    <span class="token comment">/* Remove usual Redis commands from the command table, then just add     * the SENTINEL command. */</span>    <span class="token function">dictEmpty</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>commands<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinelcmds<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinelcmds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> retval<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> <span class="token operator">*</span>cmd <span class="token operator">=</span> sentinelcmds<span class="token operator">+</span>j<span class="token punctuation">;</span>         retval <span class="token operator">=</span> <span class="token function">dictAdd</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>commands<span class="token punctuation">,</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span>cmd<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverAssert</span><span class="token punctuation">(</span>retval <span class="token operator">==</span> DICT_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//......</span>    <span class="token comment">//初始化各种数据结构</span>    <span class="token comment">//......</span><span class="token punctuation">}</span>  <span class="token comment">//所有sentinel可以执行的命令</span><span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> sentinelcmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"ping"</span><span class="token punctuation">,</span>pingCommand<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"sentinel"</span><span class="token punctuation">,</span>sentinelCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"subscribe"</span><span class="token punctuation">,</span>subscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"unsubscribe"</span><span class="token punctuation">,</span>unsubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"psubscribe"</span><span class="token punctuation">,</span>psubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"punsubscribe"</span><span class="token punctuation">,</span>punsubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"publish"</span><span class="token punctuation">,</span>sentinelPublishCommand<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"pub-sub fast"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"info"</span><span class="token punctuation">,</span>sentinelInfoCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"random @dangerous"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">,</span>sentinelRoleCommand<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"fast read-only @dangerous"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"client"</span><span class="token punctuation">,</span>clientCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin random @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"shutdown"</span><span class="token punctuation">,</span>shutdownCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"auth"</span><span class="token punctuation">,</span>authCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"no-auth fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span>helloCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"no-auth fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"acl"</span><span class="token punctuation">,</span>aclCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"command"</span><span class="token punctuation">,</span>commandCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"random @connection"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>初始化sentinel状态</p><p>接下来服务器会初始化一个<strong>sentinel.c/sentinelState</strong>，用于保存所有与sentinel功能有关的状态(redisServer保存了一般的状态)</p><pre class="language-c" data-language="c"><code class="language-c"> <span class="token comment">/** * sentinel 状态 */</span><span class="token comment">/* Main state. */</span><span class="token keyword">struct</span> <span class="token class-name">sentinelState</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> myid<span class="token punctuation">[</span>CONFIG_RUN_ID_SIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* This sentinel ID. */</span>    <span class="token class-name">uint64_t</span> current_epoch<span class="token punctuation">;</span>         <span class="token comment">/* Current epoch. */</span> <span class="token comment">//当前纪元用户实现故障转移</span>     <span class="token comment">/**     * 当前哨兵监听的所有master字典     * key是实例名，value是指向sentinelRedisInstance 结构的指针     */</span>     dict <span class="token operator">*</span>masters<span class="token punctuation">;</span>      <span class="token comment">/* Dictionary of master sentinelRedisInstances.                           Key is the instance name, value is the                           sentinelRedisInstance structure pointer. */</span>    <span class="token comment">//是否进入了TILT模式                                          </span>    <span class="token keyword">int</span> tilt<span class="token punctuation">;</span>           <span class="token comment">/* Are we in TILT mode? */</span>    <span class="token comment">//目前正在执行的脚本数量</span>    <span class="token keyword">int</span> running_scripts<span class="token punctuation">;</span>    <span class="token comment">/* Number of scripts in execution right now. */</span>    <span class="token comment">//进入tilt模式的时间</span>    <span class="token class-name">mstime_t</span> tilt_start_time<span class="token punctuation">;</span>       <span class="token comment">/* When TITL started. */</span>    <span class="token comment">//最后一次执行处理器的时间</span>    <span class="token class-name">mstime_t</span> previous_time<span class="token punctuation">;</span>         <span class="token comment">/* Last time we ran the time handler. */</span>    <span class="token comment">//FIFO队列，包含所有需要执行的用户脚本</span>    list <span class="token operator">*</span>scripts_queue<span class="token punctuation">;</span>            <span class="token comment">/* Queue of user scripts to execute. */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>announce_ip<span class="token punctuation">;</span>  <span class="token comment">/* IP addr that is gossiped to other sentinels if                           not NULL. */</span>    <span class="token keyword">int</span> announce_port<span class="token punctuation">;</span>  <span class="token comment">/* Port that is gossiped to other sentinels if                           non zero. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> simfailure_flags<span class="token punctuation">;</span> <span class="token comment">/* Failures simulation. */</span>    <span class="token keyword">int</span> deny_scripts_reconfig<span class="token punctuation">;</span> <span class="token comment">/* Allow SENTINEL SET ... to change script                                  paths at runtime? */</span><span class="token punctuation">}</span> sentinel<span class="token punctuation">;</span>   <span class="token comment">//sentinel 模块初始化</span><span class="token comment">/* Perform the Sentinel mode initialization. */</span><span class="token keyword">void</span> <span class="token function">initSentinel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token comment">//...............</span>    <span class="token comment">// 清空常用命令；只添加sentinel 命令</span>    <span class="token comment">//..............</span>     <span class="token comment">//初始化各种数据结构</span>    <span class="token comment">/* Initialize various data structures. */</span>    sentinel<span class="token punctuation">.</span>current_epoch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>masters <span class="token operator">=</span> <span class="token function">dictCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instancesDictType<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>tilt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>tilt_start_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>previous_time <span class="token operator">=</span> <span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>running_scripts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>scripts_queue <span class="token operator">=</span> <span class="token function">listCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>announce_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>announce_port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>simfailure_flags <span class="token operator">=</span> SENTINEL_SIMFAILURE_NONE<span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>deny_scripts_reconfig <span class="token operator">=</span> SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化sentinel状态的master属性</p><p>sentinelState状态中的master属性记录所有被sentinel监视的所有相关信息；</p><ul><li>sentinelState.masters的结构是hash；</li><li>字典键的被监视主服务的名字；</li><li>字典值则是 sentinel.c/sentinelRedisInstance结构体；</li></ul><p>根据sentinel启动时的指定的配置项或者配置文件来初始化</p><p>如果按照下图指定:</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121155233753.png" alt="image-20211121155233753"></p><p>则最后的字典值为:</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121155311843.png" alt="image-20211121155311843"></p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121155327607.png" alt="image-20211121155327607"></p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121155342021.png" alt="image-20211121155342021"></p><p>创建与主服务器的网络连接</p><p>sentinel会与被监控的master建立连接，sentinel将会成为master的客户端</p><p>sentinel会创建两个连接向master的异步网络连接：</p><ul><li>一个是命令连接，用于向master发送命令并接受回复</li><li>一个是订阅连接，用于订阅master的<code>__sentinel__:hello</code>频道</li></ul><blockquote><p><strong>为什么要有两个连接</strong></p><p>目前发布和订阅的功能，被发送的信息都不会保存在服务器里面；</p><p>如果发送时接受信息的客户端不在线，那么客户端就会丢失这条数据；为了不丢失<code>__sentinel__:hello</code>频道的任何信息，所以sentinel必须创建一个订阅连接来接受消息</p><p>因为是多个连接,所以必须是异步的</p><p><strong>创建入口：</strong><br>server.c/main -&gt; server.c/serverCron() -&gt; sentinel.c/sentinelTimer -&gt; sentinel.c/sentinelHandleDictOfRedisInstances() -&gt; sentinel.c/sentinelHandleRedisInstance</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//对于特定的redis实例执行预操作</span><span class="token comment">/* Perform scheduled operations for the specified Redis instance. */</span><span class="token keyword">void</span> <span class="token function">sentinelHandleRedisInstance</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* ========== MONITORING HALF ============ */</span>    <span class="token comment">/* Every kind of instance */</span>    <span class="token comment">//监控所有类型的实例(master,slave,sentinel)</span>    <span class="token function">sentinelReconnectInstance</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sentinelSendPeriodicCommands</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* ============== ACTING HALF ============= */</span>    <span class="token comment">/* We don't proceed with the acting half if we are in TILT mode.     * TILT happens when we find something odd with the time, like a     * sudden change in the clock. */</span>    <span class="token comment">//对于tilt模式下哨兵已经不可信,这时候检测是否时钟恢复正常,如果正常就推出tilt模式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>tilt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>sentinel<span class="token punctuation">.</span>tilt_start_time <span class="token operator">&lt;</span> sentinel_tilt_period<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        sentinel<span class="token punctuation">.</span>tilt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sentinelEvent</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"-tilt"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"#tilt mode exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Every kind of instance */</span>    <span class="token function">sentinelCheckSubjectivelyDown</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Masters and slaves */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SRI_MASTER<span class="token operator">|</span>SRI_SLAVE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Nothing so far. */</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Only masters */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_MASTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelCheckObjectivelyDown</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sentinelStartFailoverIfNeeded</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">sentinelAskMasterStateToOtherSentinels</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span>SENTINEL_ASK_FORCED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sentinelFailoverStateMachine</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sentinelAskMasterStateToOtherSentinels</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span>SENTINEL_NO_FLAGS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121204051572.png" alt="image-20211121204051572"></p><h3 id="获取主服务器信息"><a href="#获取主服务器信息" class="headerlink" title="获取主服务器信息"></a>获取主服务器信息</h3><p>sentinel默认每10s一次频率向 master &amp; slale发送info命令</p><p>实现的入口:(server.c/main -&gt; server.c/serverCron() -&gt; sentinel.c/sentinelTimer -&gt; sentinel.c/sentinelHandleDictOfRedisInstances() -&gt; sentinel.c/sentinelSendPeriodicCommands)</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 定期向指定的slave或master发送PING、INFO, 发布到消息到 “订阅”的channel */</span><span class="token comment">//类似于心跳检测</span><span class="token comment">/* Send periodic PING, INFO, and PUBLISH to the Hello channel to * the specified master or slave instance. */</span><span class="token keyword">void</span> <span class="token function">sentinelSendPeriodicCommands</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">mstime_t</span> now <span class="token operator">=</span> <span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">mstime_t</span> info_period<span class="token punctuation">,</span> ping_period<span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token comment">/* Return ASAP if we have already a PING or INFO already pending, or     * in the case the instance is not properly connected. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>disconnected<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* For INFO, PING, PUBLISH that are not critical commands to send we     * also have a limit of SENTINEL_MAX_PENDING_COMMANDS. We don't     * want to use a lot of memory just because a link is not working     * properly (note that anyway there is a redundant protection about this,     * that is, the link will be disconnected and reconnected if a long     * timeout condition is detected. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands <span class="token operator">&gt;=</span>        SENTINEL_MAX_PENDING_COMMANDS <span class="token operator">*</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>refcount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* If this is a slave of a master in O_DOWN condition we start sending     * it INFO every second, instead of the usual SENTINEL_INFO_PERIOD     * period. In this state we want to closely monitor slaves in case they     * are turned into masters by another Sentinel, or by the sysadmin.     *     * Similarly we monitor the INFO output more often if the slave reports     * to be disconnected from the master, so that we can have a fresh     * disconnection time figure. */</span>    <span class="token comment">//对于一个处于客观判断下线的slave,每秒发送info,避免被转换成了master</span>    <span class="token comment">//同时也检测其真实下线时间</span>    <span class="token comment">//todo:这里其实消耗的资源会比较多,有没有更好的解决办法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_SLAVE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>master<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SRI_O_DOWN<span class="token operator">|</span>SRI_FAILOVER_IN_PROGRESS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>master_link_down_time <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info_period <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        info_period <span class="token operator">=</span> sentinel_info_period<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* We ping instances every time the last received pong is older than     * the configured 'down-after-milliseconds' time, but every second     * anyway if 'down-after-milliseconds' is greater than 1 second. */</span>    ping_period <span class="token operator">=</span> ri<span class="token operator">-&gt;</span>down_after_period<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ping_period <span class="token operator">&gt;</span> sentinel_ping_period<span class="token punctuation">)</span> ping_period <span class="token operator">=</span> sentinel_ping_period<span class="token punctuation">;</span>    <span class="token comment">/* Send INFO to masters and slaves, not sentinels. */</span>    <span class="token comment">//向master和slave发送info命令</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_SENTINEL<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>info_refresh <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>info_refresh<span class="token punctuation">)</span> <span class="token operator">&gt;</span> info_period<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        retval <span class="token operator">=</span> <span class="token function">redisAsyncCommand</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token punctuation">,</span>            sentinelInfoReplyCallback<span class="token punctuation">,</span> ri<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span>            <span class="token function">sentinelInstanceMapCommand</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span><span class="token string">"INFO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Send PING to all the three kinds of instances. */</span>    <span class="token comment">//对所有的实例发送ping</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>last_pong_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ping_period <span class="token operator">&amp;&amp;</span>               <span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>last_ping_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ping_period<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelSendPing</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* PUBLISH hello messages to all the three kinds of instances. */</span>    <span class="token comment">//向订阅的频道发布信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>last_pub_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> sentinel_publish_period<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelSendHello</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121205944717.png" alt="image-20211121205944717"></p><p>通过解析maser返回Info命令信息，获取master的当前信息；</p><ul><li>一方面获取master的信息，包括run_id、角色、地址等；</li><li>另一方面获取master下所有slave服务器信息；</li></ul><p>根据这些返回信息，用户无需提供从服务器信息，就可以自动发现从服务器（便于与从服务器建立连接）</p><p>这些信息用来更新slaves字典,出现了新的就要加入到字典中,键是从服务器的ip:port，值是从服务器的对应实例结构</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121223027407.png" alt="image-20211121223027407"></p><p><strong>解析info返回结果入口</strong><br><strong>sentinel.c/sentinelSendPeriodicCommands</strong> -&gt; <strong>sentinel.c/sentinelInfoReplyCallback</strong> &gt; <strong>sentinel.c/sentinelInfoReplyCallback</strong> &gt; <strong>sentinel.c/sentinelRefreshInstanceInfo</strong></p><h3 id="获取从服务器信息"><a href="#获取从服务器信息" class="headerlink" title="获取从服务器信息"></a>获取从服务器信息</h3><p>对于每个连接到主服务器的从服务器也要建立命令连接和订阅连接</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121223238004.png" alt="image-20211121223238004"></p><p>通过解析slave返回的slave的信息，主要提取以下信息。然后根据这些信息，更新从服务的实例信息；</p><ul><li>从服务的run_id</li><li>主服务器的ip地址以及端口号</li><li>主从服务器的连接状态</li><li>从服务器优先级</li><li>从服务的偏移量</li></ul><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211121223623465.png" alt="image-20211121223623465"></p><h3 id="向被监视的主从服务器发送信息"><a href="#向被监视的主从服务器发送信息" class="headerlink" title="向被监视的主从服务器发送信息"></a>向被监视的主从服务器发送信息</h3><p>每两秒进行一次</p><p>发送的内容：</p><ul><li>sentinel_ip :sentinel的ip；</li><li>sentinel_port：sentinel的端口</li><li>sentinel_runid：：sentinel的runid</li><li>sentinel_current_epoch:sentinel当前配置的纪元</li><li>master_name: master的名称</li><li>·master_ip：master的ip</li><li>master_port：master的端口</li><li>master_config_epoch：master的当前配置的纪元</li></ul><p>函数实现：（sentinel.c/sentinelSendHello）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//通过Pub/Sub向指定的redis实例(即ri)发送hello消息,广播主机当前的配置,通知sentinel存活</span><span class="token comment">//如果发布成功排队,返回C_OK,否则是C_ERR</span><span class="token keyword">int</span> <span class="token function">sentinelSendHello</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span>NET_IP_STR_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> payload<span class="token punctuation">[</span>NET_IP_STR_LEN<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>announce_ip<span class="token punctuation">;</span>    <span class="token keyword">int</span> announce_port<span class="token punctuation">;</span>    sentinelRedisInstance <span class="token operator">*</span>master <span class="token operator">=</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_MASTER<span class="token punctuation">)</span> <span class="token operator">?</span> ri <span class="token operator">:</span> ri<span class="token operator">-&gt;</span>master<span class="token punctuation">;</span>    sentinelAddr <span class="token operator">*</span>master_addr <span class="token operator">=</span> <span class="token function">sentinelGetCurrentMasterAddress</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>disconnected<span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    <span class="token comment">/* Use the specified announce address if specified, otherwise try to     * obtain our own IP address. */</span>    <span class="token comment">//设置广播的ip和端口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>announce_ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        announce_ip <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>announce_ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">anetFdToString</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token operator">-&gt;</span>c<span class="token punctuation">.</span>fd<span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>FD_TO_SOCK_NAME<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        announce_ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>announce_port<span class="token punctuation">)</span> announce_port <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>announce_port<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>tls_replication <span class="token operator">&amp;&amp;</span> server<span class="token punctuation">.</span>tls_port<span class="token punctuation">)</span> announce_port <span class="token operator">=</span> server<span class="token punctuation">.</span>tls_port<span class="token punctuation">;</span>    <span class="token keyword">else</span> announce_port <span class="token operator">=</span> server<span class="token punctuation">.</span>port<span class="token punctuation">;</span>    <span class="token comment">/* Format and send the Hello message. */</span>    <span class="token comment">//格式化要发送的消息</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"%s,%d,%s,%llu,"</span> <span class="token comment">/* Info about this sentinel. */</span>        <span class="token string">"%s,%s,%d,%llu"</span><span class="token punctuation">,</span> <span class="token comment">/* Info about current master. */</span>        announce_ip<span class="token punctuation">,</span> announce_port<span class="token punctuation">,</span> sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sentinel<span class="token punctuation">.</span>current_epoch<span class="token punctuation">,</span>        <span class="token comment">/* --- */</span>        master<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span><span class="token function">announceSentinelAddr</span><span class="token punctuation">(</span>master_addr<span class="token punctuation">)</span><span class="token punctuation">,</span>master_addr<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> master<span class="token operator">-&gt;</span>config_epoch<span class="token punctuation">)</span><span class="token punctuation">;</span>    retval <span class="token operator">=</span> <span class="token function">redisAsyncCommand</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token punctuation">,</span>        sentinelPublishReplyCallback<span class="token punctuation">,</span> ri<span class="token punctuation">,</span> <span class="token string">"%s %s %s"</span><span class="token punctuation">,</span>        <span class="token function">sentinelInstanceMapCommand</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span><span class="token string">"PUBLISH"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        SENTINEL_HELLO_CHANNEL<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> C_OK<span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="接受来自主从服务器的频道信息"><a href="#接受来自主从服务器的频道信息" class="headerlink" title="接受来自主从服务器的频道信息"></a>接受来自主从服务器的频道信息</h3><p>当sentinel与主服务或者从服务建立连接后，sentinel就订阅主服务或从服务器的<code>__sentinel__::hello</code>频道；</p><p>订阅频道会一直持续到连接断开；</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211122130447110.png" alt="image-20211122130447110"></p><p>这样对于监听同一个服务器的多个sentinel，一个sentinel发送的信息会被其他sentinel接受到，这些信息会被其他sentinel用于更新信息；</p><p><strong>举个例子：</strong><br>假设有三个sentinel ，s1、s2、s3监听同一个服务器，s1向服务器频道<code>__sentinel__:hello</code>发送了一条信息，s1、s2、s3都会受到这条消息 ；</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211122145234776.png" alt="image-20211122145234776"></p><p>sentinel接受到消息后，会对消息进行解析:</p><ul><li>如果是自己发送的信息，就会丢弃该信息</li><li>如不是自己发送的，则是监视同一服务器的其他sentinel发送的，则会更新sentinel实例中相关信息</li></ul><h3 id="更新sentinels字典"><a href="#更新sentinels字典" class="headerlink" title="更新sentinels字典"></a>更新sentinels字典</h3><p>每个sentinel节点对于其他也监视这个主服务器的其他sentinel节点保存了一个instance结构</p><ul><li>键是其中一个 Sentinel 的名字， 格式为 ip:port</li><li>值是对应的实例结构</li></ul><p>收到其他sentinel发送的消息时，对于信息中sentinel，主服务器相关的参数配置做相应的记录</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211122151957038.png" alt="image-20211122151957038"></p><p>sentinel节点保存的master实例中的sentinels字典不需要包含自身</p><p>sentinels字典利于发现监视同一个主服务器的其他sentinel节点</p><h3 id="创建连向其他sentinel节点的命令连接"><a href="#创建连向其他sentinel节点的命令连接" class="headerlink" title="创建连向其他sentinel节点的命令连接"></a>创建连向其他sentinel节点的命令连接</h3><p>使用命令连接相连的各个 Sentinel 可以通过向其他 Sentinel 发送命令请求来进行信息交换，但是不会创建订阅链接</p><p>Sentinel需要通过接收主服务器或者从服务器发来的频道信息来发现未知的新 Sentinel, 所以需要建立订阅连接， 而相互已知的 Sentinel 只要使用命令连接来进行通信就足够了   </p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211122153845487.png" alt="image-20211122153845487"></p><h3 id="检测主观下线状态"><a href="#检测主观下线状态" class="headerlink" title="检测主观下线状态"></a>检测主观下线状态</h3><p>默认情况下sentinel每秒发送ping，然后通过回复的pong确认监视的对象是否下线</p><p>对于ping命令的回复分两种情况：</p><ul><li>有效回复：返回 +PONG、-LOADING、-MASTERDOWN</li><li>无效回复：除了上述三种的回复外，都是无效回复</li></ul><p>如果down-after-millseconds毫秒内，连续返回无效回复，那么sentinel就会将master标记为主观下线，在实例结构的flag属性中标记主观下线</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211125223705911.png" alt="image-20211125223705911"></p><blockquote><p>down-after-millonseconds是sentinel配置文件指定的下线标准；<br>这个参数不仅会应用于master，还会应用到master下属的所有从服务器；</p><p>多个sentinel设置的down-after-millseconds时间可能是不同的，所以可能部分的sentinel认为主观下线，而其他的认为没有主观下线</p></blockquote><h4 id="检测客观下线状态"><a href="#检测客观下线状态" class="headerlink" title="检测客观下线状态"></a>检测客观下线状态</h4><p>当sentinel将一个主服务器判断主观下线时，会向其他sentinel询问，看其他sentinel是否也人为他下线；</p><p>当有足够多的sentinel认为服务已经下线时，就判定服务器是客观下线，并进行故障转移</p><h4 id="发送SENTINEL-is-master-down-by-addr命令"><a href="#发送SENTINEL-is-master-down-by-addr命令" class="headerlink" title="发送SENTINEL is-master-down-by-addr命令"></a>发送SENTINEL is-master-down-by-addr命令</h4><p>询问其他sentinel的命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">SENTINEL is-master-down-by-addr <span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>current_epoch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>runid<span class="token operator">&gt;</span></code></pre><p>各参数意义如下</p><ul><li>ip：被sentinel判断为主观下线的服务ip</li><li>port：被sentinel判断为主观下线的服务端口</li><li>current_epoch：sentinel当前配置的纪元，用于选取领头sentinel</li><li>runid:可以是*符号或者sentinel的运行id，* 代表用于检测主服务器的客观下线状态；sentinel的运行id 则代表用于选举领头的sentinel；</li></ul><h4 id="接受SENTINEL-is-master-down-by-addr命令"><a href="#接受SENTINEL-is-master-down-by-addr命令" class="headerlink" title="接受SENTINEL is-master-down-by-addr命令"></a>接受SENTINEL is-master-down-by-addr命令</h4><p>返回的信息是包含三个参数的multi bulk：</p><ul><li><down_state>：表示自己对于目标服务器在线状态的检测结果</down_state></li><li><leader_runid>：可以是 * 符号或者目标 Sentinel 的局部领头 Sentinel 的运行 ID: * 符号代表命令用于检测主服务器的下线状态， 而局部领头 Sentinel 的运行 ID 则用于选举领头 Sentinel</leader_runid></li><li><leader_epoch>  ：局部领头 Sentinel的运行纪元</leader_epoch></li></ul><h4 id="接受SENTINEL-is-master-down-by-addr命令-的回复"><a href="#接受SENTINEL-is-master-down-by-addr命令-的回复" class="headerlink" title="接受SENTINEL is-master-down-by-addr命令 的回复"></a>接受SENTINEL is-master-down-by-addr命令 的回复</h4><p>sentienl根据SENTINEL is-master-down-by-addr命令的返回，统计其他sentinel返回下线的数量；<br>当这一数量达到配置指定的客观下线数量（之前由quorum参数指定）时，sentinel会将服务器实例结构的flags属性的SIR_O_DOWN标记位打开，标识主服务进入客观下线状态；</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211125223723501.png" alt="image-20211125223723501"></p><blockquote><p>同样的，多个sentinel设置的quorum参数可能是不同的，所以可能部分的sentinel认为客观下线，而其他的认为没有客观下线</p></blockquote><h3 id="选举sentinel领头者"><a href="#选举sentinel领头者" class="headerlink" title="选举sentinel领头者"></a>选举sentinel领头者</h3><p>当一个主服务器被判断为下线时，监视这个服务器sentinel的会进行协商，选举出一个领头的sentinel，由这个领头的sentinel执行故障转移操作</p><p><strong>选举领头sentinel的规则和方法</strong>：</p><ul><li>所有在线的sentinel都有被选为领头sentinel的资格</li><li>每次进行领头sentinel选举的时候，不论选举是否成功，所有sentinel的配置纪元的值都会+1；（配置的纪元就是个计数器）</li><li>每个配置的纪元里面，所有sentinel都有一票将某个sentinel设置为局部领头sentinel的机会，并且局部领头一旦设置，在这个配置纪元里面就不能更改了</li><li>每个发现主服务器下线的sentinel，都会要求其他sentinel将自己设置为领头sentinel</li><li>sentinel设置局部领头sentinel的选票规则是先到先得；最先向目标sentinel“索要投票” 将会得到该票，后续“索票”的sentinel将会被拒绝；</li><li>源sentinel收到目标sentinel的回复后，会解析回复中的leader_epoch；如果leader_epoch和源sentinel的一致，那么源sentinel会继续解析leader_runid参数；<br>如果leader_runid和源sentinel的run_id一致，说明目标sentinel将源sentinel设为了领头sentinel；</li><li>如果某sentinel被半数以上sentinel设置为了领头sentinel，那么这个sentinel将会成为领头sentinel；</li><li>如果给定的时间限制内，没有选举出领头sentinel，那么将在一段时间后重新选举，直到选举出为止；</li></ul><p>在这里和区块链选举比较相似</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>选举出的领头sentinel将会已下线的主服务器进行下线操作，下线操作分为以下三个操作：</p><ol><li>在已下线的主服务的所有从服务器中，挑选出一个从服务器，将其转换为主服务器；</li><li>将已下线的主服务的所有从服务器，复制新的主服务器；</li><li>设置已经下线的主服务为从服务，并复制新的主服务，当下线的主服务重新上线后，就会复制新的主服务了；</li></ol><h4 id="选取新的主服务器步骤"><a href="#选取新的主服务器步骤" class="headerlink" title="选取新的主服务器步骤"></a>选取新的主服务器步骤</h4><ol><li>领头的sentinel会将下线的主服务的所有从服务放到一个列表里，然后按照以下规则对列表中一个个的过滤：</li><li>过滤掉已经断线的从服务器；</li><li>过滤掉最近5s内没有回复过sentinel 的info命令的从服务；</li><li>过滤掉与主服务器连接断开时间超过（down-after-millseconds * 10）毫秒的从服务器；这样可以保证剩余从服务器的数据比较新；</li><li>然后从剩余从服务器中选举优先级高的从服务器；</li><li>如果服务器优先级相同，则选取复制偏移量大的（复制偏移量大，说明数据新）；</li><li>至此，如果还没有选举出，则对运行id进行排序，选举出运行id最小的从服务器；</li></ol><p>选举出新的主服务后，sentinel将向新的主服务器发送slave no one ，转换成新的主服务器<br>然后领头sentinel以每秒一次的频率向新的主服务发送info命令,用于判断“切换主服务操作”是否成功（当新的主服务器角色由salve变成master，说明已经切换成功了）</p><h4 id="修改从服务器的复制目标"><a href="#修改从服务器的复制目标" class="headerlink" title="修改从服务器的复制目标"></a>修改从服务器的复制目标</h4><p>新的主服务出现后，sentinel就会让所有从服务器去复制新的主服务器（通过salveof 命令实现）</p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211126111618727.png" alt="image-20211126111618727"></p><p><img src="/2022/01/27/redis-shao-bing-sentinel/image-20211126111640191.png" alt="image-20211126111640191"></p><h4 id="修改旧的主服务器的为从服务器"><a href="#修改旧的主服务器的为从服务器" class="headerlink" title="修改旧的主服务器的为从服务器"></a>修改旧的主服务器的为从服务器</h4><p>最后，将已经下线的主服务设置为从服务器，并复制新的主服务；</p><p>注意：因为这时旧的主服务已经下线，所以这时这个操作先保存到sentinel对应的实例结构中，等到旧的主服务重新上线后，sentinel就会向他发送slaveof命令，将他设置为从服务器；</p><h3 id="tilt模式"><a href="#tilt模式" class="headerlink" title="tilt模式"></a>tilt模式</h3><p>Redis哨兵依赖于系统时间,为了了解某个实例是否是可用的,其会记住最后一次成功回复PING命令的时间,然后与现在时间进行比较判断生存时间.<br>但是如果计算机时间发生了意外的变化,或者计算机现在非常忙碌,或者进程因为某些原因阻塞,哨兵可能会有意料之外的行为</p><p>TILT是一个特殊的保护模式,Sentinel的Tilt模式会在以下两种情况下开启：</p><ol><li>Sentinel进程被阻塞超过SENTINEL_TILT_TRIGGER时间（默认为2s），可能因为进程或系统I/O（内存，网络，存储）请求过多。</li><li>系统时钟调整到之前某个时间值。</li></ol><p>进入tilt模式会降低系统的可靠性(因为此时故障转移无法进行).sentinel计时器中断一般一秒十次.我们希望两次定时器中断的时间内控制在大约100毫秒.</p><p>当进入TILT模式时哨兵将会继续监视所有内容,但是</p><ul><li>停止所有的动作</li><li>会开始否定<code>SENTINEL is-master-down-by-addr</code>命令因为其不信任故障检测的能力</li></ul><p>如果30秒以内一切正常则退出TILT模式.<br>注意可以使用很多内核提供的单调时钟API已替换TILT模式.但是尚不清楚这是否是一个好的解决方案,因为当前系统避免了如果进程只是被挂起或长时间未由调度程序执行这种问题.</p><p>在计算机时间发生严重变化的时候进入<code>TILT模式</code>,并禁止除了监控以外的操作,因为此时sentinel依赖于时间,判断某个节点下线是根据PING的间隔来实现的,如果进入<code>TILT模式</code>证明时钟出现问题,此时这个sentinel已经不能被相信了.</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis哨兵sentinels</title>
      <link href="/2022/01/27/redis-shao-bing-sentinels/"/>
      <url>/2022/01/27/redis-shao-bing-sentinels/</url>
      
        <content type="html"><![CDATA[<h2 id="哨兵Sentinel"><a href="#哨兵Sentinel" class="headerlink" title="哨兵Sentinel"></a>哨兵Sentinel</h2><p>Sentinel节点本质上是一个特殊的Redis节点</p><p>它可以监视任意多个主服务器以及这些主服务器属下的所有从服务器，并在被监视的主服务器进人下线状态时(根据ping的时间间隔判断是否是下线了)， 自动将下线主服务器属下的某个从服务器升级为新的主服务器， 然后由新的主服务器代替已下线的主服务器继续处理命令请求  </p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211119220249825.png" alt="image-20211119220249825"></p><p>当 serverl 的下线时长超过用户设定的下线时长上限时， Sentinel 系统就会对server1 执行故障转移操作：</p><ul><li>首先， Sentinel 系统会挑选 server1属下的其中一个从服务器， 并将这个被选中的从服务器升级为新的主服务器。  </li><li>之后， Sentinel 系统会向 serverl 属下的所有从服务器发送新的复制指令， 让它们成为新的主服务器的从服务器， 当所有从服务器都开始复制新的主服务器时， 故障转移操作执行完毕。</li><li>另外， Sentinel 还会继续监视已下线的 serverl， 并在它重新上线时， 将它设置为新的主服务器的从服务器。  </li></ul><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211119220709722.png" alt="image-20211119220709722"></p><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><p>每个Sentinel实例会维护与所监测的主从实例之间的两个连接，分别是命令连接（Command Connection）和发布/订阅连接（Pub/Sub Connection）。但是<strong>Sentinel和其他Sentinel之间只有一个命令连接</strong>。</p><h4 id="命令连接"><a href="#命令连接" class="headerlink" title="命令连接"></a>命令连接</h4><p>Sentinel维护命令连接是为了与其他主从实例以及Sentinel实例通过发送接收命令的方式进行通信</p><p>作用包括：</p><ol><li>Sentinel会默认以每1s间隔发送PING 命令给其他实例以主观判断其他实例是否下线。</li><li>Sentinel会通过Sentinel和主实例之间的命令连接每隔10s发送INFO命令给主从实例以得到主实例和从实例的最新信息。</li><li>在主实例下线的情况下，Sentinel会通过Sentinel和从实例的命令连接发送SLAVEOF NO ONE命令给选定的从实例从而使从实例提升为新的主节点。</li><li>Sentinel会默认每隔1s发送is-master-down-by-addr命令以询问其他Sentinel节点关于监控的主节点是否下线。</li></ol><p>实现函数sentinel.c/sentinelReconnectInstance</p><h4 id="发布-订阅连接"><a href="#发布-订阅连接" class="headerlink" title="发布/订阅连接"></a>发布/订阅连接</h4><p>Sentinel维护和其他主从节点的发布/订阅连接作用是为了获知其他监控相同主从实例的Sentinel实例的存在，并且从其他Sentinel实例中更新对所监控的主从实例以及发送的Sentinel实例的认知。例如在故障转移完成后，其他Sentinel通过读取领头Sentinel的频道消息来更新新的主节点的相关信息（地址，端口号等）。</p><p>Sentinel在默认每隔2秒钟会发送Hello消息包到其对应的主从实例的_<em>sentinel</em>_:hello频道中。Hello消息格式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">__sentinel__:hello <span class="token operator">&lt;</span>sentinel地址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel端口号<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel运行id<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>sentinel配置纪元<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点名字 <span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点地址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点端口号<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>主节点配置纪元<span class="token operator">&gt;</span></code></pre><p>当Sentinel通过订阅连接收到其他Sentinel发送的的Hello包时，会更新对主从节点以及发送Sentinel的实例，如果收到自己发送的Hello包，则简单的丢弃不做任何处理。</p><p>处理hello信息实现函数sentinel.c/sentinelProcessHelloMessage</p><p>发布/订阅连接实现函数sentinel.c/sentinelReconnectInstance</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>sentinel本质是一个特殊模式的redis的服务器，代码的入口一样位于server.c/main函数</p><p>与普通的节点有不同:</p><p>**sertinet.c/initSentinelConfig()**函数将会覆盖普通redis服务器的一些默认配置</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 此函数用于设置Sentinel的默认值 * 覆盖普通redis config默认值。 */</span> <span class="token comment">/* This function overwrites a few normal Redis config default with Sentinel * specific defaults. */</span><span class="token keyword">void</span> <span class="token function">initSentinelConfig</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//使用26379作为sentinel的默认端口</span>    server<span class="token punctuation">.</span>port <span class="token operator">=</span> REDIS_SENTINEL_PORT<span class="token punctuation">;</span>     server<span class="token punctuation">.</span>protected_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* Sentinel must be exposed. */</span><span class="token punctuation">}</span></code></pre><p>使用<strong>sentinel.c/sentinelcmds</strong>作为sentinel的命令表</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//sentinel 模块初始化</span><span class="token comment">/* Perform the Sentinel mode initialization. */</span><span class="token keyword">void</span> <span class="token function">initSentinel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>     <span class="token comment">// 清空常用命令；只添加sentinel 命令</span>    <span class="token comment">/* Remove usual Redis commands from the command table, then just add     * the SENTINEL command. */</span>    <span class="token function">dictEmpty</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>commands<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinelcmds<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinelcmds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> retval<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> <span class="token operator">*</span>cmd <span class="token operator">=</span> sentinelcmds<span class="token operator">+</span>j<span class="token punctuation">;</span>         retval <span class="token operator">=</span> <span class="token function">dictAdd</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>commands<span class="token punctuation">,</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span>cmd<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverAssert</span><span class="token punctuation">(</span>retval <span class="token operator">==</span> DICT_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//......</span>    <span class="token comment">//初始化各种数据结构</span>    <span class="token comment">//......</span><span class="token punctuation">}</span>  <span class="token comment">//所有sentinel可以执行的命令</span><span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> sentinelcmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"ping"</span><span class="token punctuation">,</span>pingCommand<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"sentinel"</span><span class="token punctuation">,</span>sentinelCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"subscribe"</span><span class="token punctuation">,</span>subscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"unsubscribe"</span><span class="token punctuation">,</span>unsubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"psubscribe"</span><span class="token punctuation">,</span>psubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"punsubscribe"</span><span class="token punctuation">,</span>punsubscribeCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"pub-sub"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"publish"</span><span class="token punctuation">,</span>sentinelPublishCommand<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"pub-sub fast"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"info"</span><span class="token punctuation">,</span>sentinelInfoCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"random @dangerous"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">,</span>sentinelRoleCommand<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"fast read-only @dangerous"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"client"</span><span class="token punctuation">,</span>clientCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin random @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"shutdown"</span><span class="token punctuation">,</span>shutdownCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"auth"</span><span class="token punctuation">,</span>authCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"no-auth fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span>helloCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"no-auth fast @connection"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"acl"</span><span class="token punctuation">,</span>aclCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"command"</span><span class="token punctuation">,</span>commandCommand<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"random @connection"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>初始化sentinel状态</p><p>接下来服务器会初始化一个<strong>sentinel.c/sentinelState</strong>，用于保存所有与sentinel功能有关的状态(redisServer保存了一般的状态)</p><pre class="language-c" data-language="c"><code class="language-c"> <span class="token comment">/** * sentinel 状态 */</span><span class="token comment">/* Main state. */</span><span class="token keyword">struct</span> <span class="token class-name">sentinelState</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> myid<span class="token punctuation">[</span>CONFIG_RUN_ID_SIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* This sentinel ID. */</span>    <span class="token class-name">uint64_t</span> current_epoch<span class="token punctuation">;</span>         <span class="token comment">/* Current epoch. */</span> <span class="token comment">//当前纪元用户实现故障转移</span>     <span class="token comment">/**     * 当前哨兵监听的所有master字典     * key是实例名，value是指向sentinelRedisInstance 结构的指针     */</span>     dict <span class="token operator">*</span>masters<span class="token punctuation">;</span>      <span class="token comment">/* Dictionary of master sentinelRedisInstances.                           Key is the instance name, value is the                           sentinelRedisInstance structure pointer. */</span>    <span class="token comment">//是否进入了TILT模式                                          </span>    <span class="token keyword">int</span> tilt<span class="token punctuation">;</span>           <span class="token comment">/* Are we in TILT mode? */</span>    <span class="token comment">//目前正在执行的脚本数量</span>    <span class="token keyword">int</span> running_scripts<span class="token punctuation">;</span>    <span class="token comment">/* Number of scripts in execution right now. */</span>    <span class="token comment">//进入tilt模式的时间</span>    <span class="token class-name">mstime_t</span> tilt_start_time<span class="token punctuation">;</span>       <span class="token comment">/* When TITL started. */</span>    <span class="token comment">//最后一次执行处理器的时间</span>    <span class="token class-name">mstime_t</span> previous_time<span class="token punctuation">;</span>         <span class="token comment">/* Last time we ran the time handler. */</span>    <span class="token comment">//FIFO队列，包含所有需要执行的用户脚本</span>    list <span class="token operator">*</span>scripts_queue<span class="token punctuation">;</span>            <span class="token comment">/* Queue of user scripts to execute. */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>announce_ip<span class="token punctuation">;</span>  <span class="token comment">/* IP addr that is gossiped to other sentinels if                           not NULL. */</span>    <span class="token keyword">int</span> announce_port<span class="token punctuation">;</span>  <span class="token comment">/* Port that is gossiped to other sentinels if                           non zero. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> simfailure_flags<span class="token punctuation">;</span> <span class="token comment">/* Failures simulation. */</span>    <span class="token keyword">int</span> deny_scripts_reconfig<span class="token punctuation">;</span> <span class="token comment">/* Allow SENTINEL SET ... to change script                                  paths at runtime? */</span><span class="token punctuation">}</span> sentinel<span class="token punctuation">;</span>   <span class="token comment">//sentinel 模块初始化</span><span class="token comment">/* Perform the Sentinel mode initialization. */</span><span class="token keyword">void</span> <span class="token function">initSentinel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token comment">//...............</span>    <span class="token comment">// 清空常用命令；只添加sentinel 命令</span>    <span class="token comment">//..............</span>     <span class="token comment">//初始化各种数据结构</span>    <span class="token comment">/* Initialize various data structures. */</span>    sentinel<span class="token punctuation">.</span>current_epoch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>masters <span class="token operator">=</span> <span class="token function">dictCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instancesDictType<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>tilt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>tilt_start_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>previous_time <span class="token operator">=</span> <span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>running_scripts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>scripts_queue <span class="token operator">=</span> <span class="token function">listCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>announce_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>announce_port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>simfailure_flags <span class="token operator">=</span> SENTINEL_SIMFAILURE_NONE<span class="token punctuation">;</span>    sentinel<span class="token punctuation">.</span>deny_scripts_reconfig <span class="token operator">=</span> SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化sentinel状态的master属性</p><p>sentinelState状态中的master属性记录所有被sentinel监视的所有相关信息；</p><ul><li>sentinelState.masters的结构是hash；</li><li>字典键的被监视主服务的名字；</li><li>字典值则是 sentinel.c/sentinelRedisInstance结构体；</li></ul><p>根据sentinel启动时的指定的配置项或者配置文件来初始化</p><p>如果按照下图指定:</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121155233753.png" alt="image-20211121155233753"></p><p>则最后的字典值为:</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121155311843.png" alt="image-20211121155311843"></p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121155327607.png" alt="image-20211121155327607"></p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121155342021.png" alt="image-20211121155342021"></p><p>创建与主服务器的网络连接</p><p>sentinel会与被监控的master建立连接，sentinel将会成为master的客户端</p><p>sentinel会创建两个连接向master的异步网络连接：</p><ul><li>一个是命令连接，用于向master发送命令并接受回复</li><li>一个是订阅连接，用于订阅master的<code>__sentinel__:hello</code>频道</li></ul><blockquote><p><strong>为什么要有两个连接</strong></p><p>目前发布和订阅的功能，被发送的信息都不会保存在服务器里面；</p><p>如果发送时接受信息的客户端不在线，那么客户端就会丢失这条数据；为了不丢失<code>__sentinel__:hello</code>频道的任何信息，所以sentinel必须创建一个订阅连接来接受消息</p><p>因为是多个连接,所以必须是异步的</p><p><strong>创建入口：</strong><br>server.c/main -&gt; server.c/serverCron() -&gt; sentinel.c/sentinelTimer -&gt; sentinel.c/sentinelHandleDictOfRedisInstances() -&gt; sentinel.c/sentinelHandleRedisInstance</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//对于特定的redis实例执行预操作</span><span class="token comment">/* Perform scheduled operations for the specified Redis instance. */</span><span class="token keyword">void</span> <span class="token function">sentinelHandleRedisInstance</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* ========== MONITORING HALF ============ */</span>    <span class="token comment">/* Every kind of instance */</span>    <span class="token comment">//监控所有类型的实例(master,slave,sentinel)</span>    <span class="token function">sentinelReconnectInstance</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sentinelSendPeriodicCommands</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* ============== ACTING HALF ============= */</span>    <span class="token comment">/* We don't proceed with the acting half if we are in TILT mode.     * TILT happens when we find something odd with the time, like a     * sudden change in the clock. */</span>    <span class="token comment">//对于tilt模式下哨兵已经不可信,这时候检测是否时钟恢复正常,如果正常就推出tilt模式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>tilt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>sentinel<span class="token punctuation">.</span>tilt_start_time <span class="token operator">&lt;</span> sentinel_tilt_period<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        sentinel<span class="token punctuation">.</span>tilt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sentinelEvent</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"-tilt"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"#tilt mode exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Every kind of instance */</span>    <span class="token function">sentinelCheckSubjectivelyDown</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Masters and slaves */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SRI_MASTER<span class="token operator">|</span>SRI_SLAVE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Nothing so far. */</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Only masters */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_MASTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelCheckObjectivelyDown</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sentinelStartFailoverIfNeeded</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">sentinelAskMasterStateToOtherSentinels</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span>SENTINEL_ASK_FORCED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sentinelFailoverStateMachine</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sentinelAskMasterStateToOtherSentinels</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span>SENTINEL_NO_FLAGS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121204051572.png" alt="image-20211121204051572"></p><h3 id="获取主服务器信息"><a href="#获取主服务器信息" class="headerlink" title="获取主服务器信息"></a>获取主服务器信息</h3><p>sentinel默认每10s一次频率向 master &amp; slale发送info命令</p><p>实现的入口:(server.c/main -&gt; server.c/serverCron() -&gt; sentinel.c/sentinelTimer -&gt; sentinel.c/sentinelHandleDictOfRedisInstances() -&gt; sentinel.c/sentinelSendPeriodicCommands)</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 定期向指定的slave或master发送PING、INFO, 发布到消息到 “订阅”的channel */</span><span class="token comment">//类似于心跳检测</span><span class="token comment">/* Send periodic PING, INFO, and PUBLISH to the Hello channel to * the specified master or slave instance. */</span><span class="token keyword">void</span> <span class="token function">sentinelSendPeriodicCommands</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">mstime_t</span> now <span class="token operator">=</span> <span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">mstime_t</span> info_period<span class="token punctuation">,</span> ping_period<span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token comment">/* Return ASAP if we have already a PING or INFO already pending, or     * in the case the instance is not properly connected. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>disconnected<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* For INFO, PING, PUBLISH that are not critical commands to send we     * also have a limit of SENTINEL_MAX_PENDING_COMMANDS. We don't     * want to use a lot of memory just because a link is not working     * properly (note that anyway there is a redundant protection about this,     * that is, the link will be disconnected and reconnected if a long     * timeout condition is detected. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands <span class="token operator">&gt;=</span>        SENTINEL_MAX_PENDING_COMMANDS <span class="token operator">*</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>refcount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* If this is a slave of a master in O_DOWN condition we start sending     * it INFO every second, instead of the usual SENTINEL_INFO_PERIOD     * period. In this state we want to closely monitor slaves in case they     * are turned into masters by another Sentinel, or by the sysadmin.     *     * Similarly we monitor the INFO output more often if the slave reports     * to be disconnected from the master, so that we can have a fresh     * disconnection time figure. */</span>    <span class="token comment">//对于一个处于客观判断下线的slave,每秒发送info,避免被转换成了master</span>    <span class="token comment">//同时也检测其真实下线时间</span>    <span class="token comment">//todo:这里其实消耗的资源会比较多,有没有更好的解决办法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_SLAVE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>master<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SRI_O_DOWN<span class="token operator">|</span>SRI_FAILOVER_IN_PROGRESS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>master_link_down_time <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info_period <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        info_period <span class="token operator">=</span> sentinel_info_period<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* We ping instances every time the last received pong is older than     * the configured 'down-after-milliseconds' time, but every second     * anyway if 'down-after-milliseconds' is greater than 1 second. */</span>    ping_period <span class="token operator">=</span> ri<span class="token operator">-&gt;</span>down_after_period<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ping_period <span class="token operator">&gt;</span> sentinel_ping_period<span class="token punctuation">)</span> ping_period <span class="token operator">=</span> sentinel_ping_period<span class="token punctuation">;</span>    <span class="token comment">/* Send INFO to masters and slaves, not sentinels. */</span>    <span class="token comment">//向master和slave发送info命令</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_SENTINEL<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>info_refresh <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>info_refresh<span class="token punctuation">)</span> <span class="token operator">&gt;</span> info_period<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        retval <span class="token operator">=</span> <span class="token function">redisAsyncCommand</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token punctuation">,</span>            sentinelInfoReplyCallback<span class="token punctuation">,</span> ri<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span>            <span class="token function">sentinelInstanceMapCommand</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span><span class="token string">"INFO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Send PING to all the three kinds of instances. */</span>    <span class="token comment">//对所有的实例发送ping</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>last_pong_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ping_period <span class="token operator">&amp;&amp;</span>               <span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>last_ping_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ping_period<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelSendPing</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* PUBLISH hello messages to all the three kinds of instances. */</span>    <span class="token comment">//向订阅的频道发布信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> ri<span class="token operator">-&gt;</span>last_pub_time<span class="token punctuation">)</span> <span class="token operator">&gt;</span> sentinel_publish_period<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sentinelSendHello</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121205944717.png" alt="image-20211121205944717"></p><p>通过解析maser返回Info命令信息，获取master的当前信息；</p><ul><li>一方面获取master的信息，包括run_id、角色、地址等；</li><li>另一方面获取master下所有slave服务器信息；</li></ul><p>根据这些返回信息，用户无需提供从服务器信息，就可以自动发现从服务器（便于与从服务器建立连接）</p><p>这些信息用来更新slaves字典,出现了新的就要加入到字典中,键是从服务器的ip:port，值是从服务器的对应实例结构</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121223027407.png" alt="image-20211121223027407"></p><p><strong>解析info返回结果入口</strong><br><strong>sentinel.c/sentinelSendPeriodicCommands</strong> -&gt; <strong>sentinel.c/sentinelInfoReplyCallback</strong> &gt; <strong>sentinel.c/sentinelInfoReplyCallback</strong> &gt; <strong>sentinel.c/sentinelRefreshInstanceInfo</strong></p><h3 id="获取从服务器信息"><a href="#获取从服务器信息" class="headerlink" title="获取从服务器信息"></a>获取从服务器信息</h3><p>对于每个连接到主服务器的从服务器也要建立命令连接和订阅连接</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121223238004.png" alt="image-20211121223238004"></p><p>通过解析slave返回的slave的信息，主要提取以下信息。然后根据这些信息，更新从服务的实例信息；</p><ul><li>从服务的run_id</li><li>主服务器的ip地址以及端口号</li><li>主从服务器的连接状态</li><li>从服务器优先级</li><li>从服务的偏移量</li></ul><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211121223623465.png" alt="image-20211121223623465"></p><h3 id="向被监视的主从服务器发送信息"><a href="#向被监视的主从服务器发送信息" class="headerlink" title="向被监视的主从服务器发送信息"></a>向被监视的主从服务器发送信息</h3><p>每两秒进行一次</p><p>发送的内容：</p><ul><li>sentinel_ip :sentinel的ip；</li><li>sentinel_port：sentinel的端口</li><li>sentinel_runid：：sentinel的runid</li><li>sentinel_current_epoch:sentinel当前配置的纪元</li><li>master_name: master的名称</li><li>·master_ip：master的ip</li><li>master_port：master的端口</li><li>master_config_epoch：master的当前配置的纪元</li></ul><p>函数实现：（sentinel.c/sentinelSendHello）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//通过Pub/Sub向指定的redis实例(即ri)发送hello消息,广播主机当前的配置,通知sentinel存活</span><span class="token comment">//如果发布成功排队,返回C_OK,否则是C_ERR</span><span class="token keyword">int</span> <span class="token function">sentinelSendHello</span><span class="token punctuation">(</span>sentinelRedisInstance <span class="token operator">*</span>ri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span>NET_IP_STR_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> payload<span class="token punctuation">[</span>NET_IP_STR_LEN<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>announce_ip<span class="token punctuation">;</span>    <span class="token keyword">int</span> announce_port<span class="token punctuation">;</span>    sentinelRedisInstance <span class="token operator">*</span>master <span class="token operator">=</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SRI_MASTER<span class="token punctuation">)</span> <span class="token operator">?</span> ri <span class="token operator">:</span> ri<span class="token operator">-&gt;</span>master<span class="token punctuation">;</span>    sentinelAddr <span class="token operator">*</span>master_addr <span class="token operator">=</span> <span class="token function">sentinelGetCurrentMasterAddress</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>disconnected<span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    <span class="token comment">/* Use the specified announce address if specified, otherwise try to     * obtain our own IP address. */</span>    <span class="token comment">//设置广播的ip和端口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>announce_ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        announce_ip <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>announce_ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">anetFdToString</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token operator">-&gt;</span>c<span class="token punctuation">.</span>fd<span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>FD_TO_SOCK_NAME<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        announce_ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span>announce_port<span class="token punctuation">)</span> announce_port <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>announce_port<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>tls_replication <span class="token operator">&amp;&amp;</span> server<span class="token punctuation">.</span>tls_port<span class="token punctuation">)</span> announce_port <span class="token operator">=</span> server<span class="token punctuation">.</span>tls_port<span class="token punctuation">;</span>    <span class="token keyword">else</span> announce_port <span class="token operator">=</span> server<span class="token punctuation">.</span>port<span class="token punctuation">;</span>    <span class="token comment">/* Format and send the Hello message. */</span>    <span class="token comment">//格式化要发送的消息</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"%s,%d,%s,%llu,"</span> <span class="token comment">/* Info about this sentinel. */</span>        <span class="token string">"%s,%s,%d,%llu"</span><span class="token punctuation">,</span> <span class="token comment">/* Info about current master. */</span>        announce_ip<span class="token punctuation">,</span> announce_port<span class="token punctuation">,</span> sentinel<span class="token punctuation">.</span>myid<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sentinel<span class="token punctuation">.</span>current_epoch<span class="token punctuation">,</span>        <span class="token comment">/* --- */</span>        master<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span><span class="token function">announceSentinelAddr</span><span class="token punctuation">(</span>master_addr<span class="token punctuation">)</span><span class="token punctuation">,</span>master_addr<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> master<span class="token operator">-&gt;</span>config_epoch<span class="token punctuation">)</span><span class="token punctuation">;</span>    retval <span class="token operator">=</span> <span class="token function">redisAsyncCommand</span><span class="token punctuation">(</span>ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>cc<span class="token punctuation">,</span>        sentinelPublishReplyCallback<span class="token punctuation">,</span> ri<span class="token punctuation">,</span> <span class="token string">"%s %s %s"</span><span class="token punctuation">,</span>        <span class="token function">sentinelInstanceMapCommand</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span><span class="token string">"PUBLISH"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        SENTINEL_HELLO_CHANNEL<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> C_OK<span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>    ri<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>pending_commands<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="接受来自主从服务器的频道信息"><a href="#接受来自主从服务器的频道信息" class="headerlink" title="接受来自主从服务器的频道信息"></a>接受来自主从服务器的频道信息</h3><p>当sentinel与主服务或者从服务建立连接后，sentinel就订阅主服务或从服务器的<code>__sentinel__::hello</code>频道；</p><p>订阅频道会一直持续到连接断开；</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211122130447110.png" alt="image-20211122130447110"></p><p>这样对于监听同一个服务器的多个sentinel，一个sentinel发送的信息会被其他sentinel接受到，这些信息会被其他sentinel用于更新信息；</p><p><strong>举个例子：</strong><br>假设有三个sentinel ，s1、s2、s3监听同一个服务器，s1向服务器频道<code>__sentinel__:hello</code>发送了一条信息，s1、s2、s3都会受到这条消息 ；</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211122145234776.png" alt="image-20211122145234776"></p><p>sentinel接受到消息后，会对消息进行解析:</p><ul><li>如果是自己发送的信息，就会丢弃该信息</li><li>如不是自己发送的，则是监视同一服务器的其他sentinel发送的，则会更新sentinel实例中相关信息</li></ul><h3 id="更新sentinels字典"><a href="#更新sentinels字典" class="headerlink" title="更新sentinels字典"></a>更新sentinels字典</h3><p>每个sentinel节点对于其他也监视这个主服务器的其他sentinel节点保存了一个instance结构</p><ul><li>键是其中一个 Sentinel 的名字， 格式为 ip:port</li><li>值是对应的实例结构</li></ul><p>收到其他sentinel发送的消息时，对于信息中sentinel，主服务器相关的参数配置做相应的记录</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211122151957038.png" alt="image-20211122151957038"></p><p>sentinel节点保存的master实例中的sentinels字典不需要包含自身</p><p>sentinels字典利于发现监视同一个主服务器的其他sentinel节点</p><h3 id="创建连向其他sentinel节点的命令连接"><a href="#创建连向其他sentinel节点的命令连接" class="headerlink" title="创建连向其他sentinel节点的命令连接"></a>创建连向其他sentinel节点的命令连接</h3><p>使用命令连接相连的各个 Sentinel 可以通过向其他 Sentinel 发送命令请求来进行信息交换，但是不会创建订阅链接</p><p>Sentinel需要通过接收主服务器或者从服务器发来的频道信息来发现未知的新 Sentinel, 所以需要建立订阅连接， 而相互已知的 Sentinel 只要使用命令连接来进行通信就足够了   </p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211122153845487.png" alt="image-20211122153845487"></p><h3 id="检测主观下线状态"><a href="#检测主观下线状态" class="headerlink" title="检测主观下线状态"></a>检测主观下线状态</h3><p>默认情况下sentinel每秒发送ping，然后通过回复的pong确认监视的对象是否下线</p><p>对于ping命令的回复分两种情况：</p><ul><li>有效回复：返回 +PONG、-LOADING、-MASTERDOWN</li><li>无效回复：除了上述三种的回复外，都是无效回复</li></ul><p>如果down-after-millseconds毫秒内，连续返回无效回复，那么sentinel就会将master标记为主观下线，在实例结构的flag属性中标记主观下线</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211125223705911.png" alt="image-20211125223705911"></p><blockquote><p>down-after-millonseconds是sentinel配置文件指定的下线标准；<br>这个参数不仅会应用于master，还会应用到master下属的所有从服务器；</p><p>多个sentinel设置的down-after-millseconds时间可能是不同的，所以可能部分的sentinel认为主观下线，而其他的认为没有主观下线</p></blockquote><h4 id="检测客观下线状态"><a href="#检测客观下线状态" class="headerlink" title="检测客观下线状态"></a>检测客观下线状态</h4><p>当sentinel将一个主服务器判断主观下线时，会向其他sentinel询问，看其他sentinel是否也人为他下线；</p><p>当有足够多的sentinel认为服务已经下线时，就判定服务器是客观下线，并进行故障转移</p><h4 id="发送SENTINEL-is-master-down-by-addr命令"><a href="#发送SENTINEL-is-master-down-by-addr命令" class="headerlink" title="发送SENTINEL is-master-down-by-addr命令"></a>发送SENTINEL is-master-down-by-addr命令</h4><p>询问其他sentinel的命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">SENTINEL is-master-down-by-addr <span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>current_epoch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>runid<span class="token operator">&gt;</span></code></pre><p>各参数意义如下</p><ul><li>ip：被sentinel判断为主观下线的服务ip</li><li>port：被sentinel判断为主观下线的服务端口</li><li>current_epoch：sentinel当前配置的纪元，用于选取领头sentinel</li><li>runid:可以是*符号或者sentinel的运行id，* 代表用于检测主服务器的客观下线状态；sentinel的运行id 则代表用于选举领头的sentinel；</li></ul><h4 id="接受SENTINEL-is-master-down-by-addr命令"><a href="#接受SENTINEL-is-master-down-by-addr命令" class="headerlink" title="接受SENTINEL is-master-down-by-addr命令"></a>接受SENTINEL is-master-down-by-addr命令</h4><p>返回的信息是包含三个参数的multi bulk：</p><ul><li><down_state>：表示自己对于目标服务器在线状态的检测结果</down_state></li><li><leader_runid>：可以是 * 符号或者目标 Sentinel 的局部领头 Sentinel 的运行 ID: * 符号代表命令用于检测主服务器的下线状态， 而局部领头 Sentinel 的运行 ID 则用于选举领头 Sentinel</leader_runid></li><li><leader_epoch>  ：局部领头 Sentinel的运行纪元</leader_epoch></li></ul><h4 id="接受SENTINEL-is-master-down-by-addr命令-的回复"><a href="#接受SENTINEL-is-master-down-by-addr命令-的回复" class="headerlink" title="接受SENTINEL is-master-down-by-addr命令 的回复"></a>接受SENTINEL is-master-down-by-addr命令 的回复</h4><p>sentienl根据SENTINEL is-master-down-by-addr命令的返回，统计其他sentinel返回下线的数量；<br>当这一数量达到配置指定的客观下线数量（之前由quorum参数指定）时，sentinel会将服务器实例结构的flags属性的SIR_O_DOWN标记位打开，标识主服务进入客观下线状态；</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211125223723501.png" alt="image-20211125223723501"></p><blockquote><p>同样的，多个sentinel设置的quorum参数可能是不同的，所以可能部分的sentinel认为客观下线，而其他的认为没有客观下线</p></blockquote><h3 id="选举sentinel领头者"><a href="#选举sentinel领头者" class="headerlink" title="选举sentinel领头者"></a>选举sentinel领头者</h3><p>当一个主服务器被判断为下线时，监视这个服务器sentinel的会进行协商，选举出一个领头的sentinel，由这个领头的sentinel执行故障转移操作</p><p><strong>选举领头sentinel的规则和方法</strong>：</p><ul><li>所有在线的sentinel都有被选为领头sentinel的资格</li><li>每次进行领头sentinel选举的时候，不论选举是否成功，所有sentinel的配置纪元的值都会+1；（配置的纪元就是个计数器）</li><li>每个配置的纪元里面，所有sentinel都有一票将某个sentinel设置为局部领头sentinel的机会，并且局部领头一旦设置，在这个配置纪元里面就不能更改了</li><li>每个发现主服务器下线的sentinel，都会要求其他sentinel将自己设置为领头sentinel</li><li>sentinel设置局部领头sentinel的选票规则是先到先得；最先向目标sentinel“索要投票” 将会得到该票，后续“索票”的sentinel将会被拒绝；</li><li>源sentinel收到目标sentinel的回复后，会解析回复中的leader_epoch；如果leader_epoch和源sentinel的一致，那么源sentinel会继续解析leader_runid参数；<br>如果leader_runid和源sentinel的run_id一致，说明目标sentinel将源sentinel设为了领头sentinel；</li><li>如果某sentinel被半数以上sentinel设置为了领头sentinel，那么这个sentinel将会成为领头sentinel；</li><li>如果给定的时间限制内，没有选举出领头sentinel，那么将在一段时间后重新选举，直到选举出为止；</li></ul><p>在这里和区块链选举比较相似</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>选举出的领头sentinel将会已下线的主服务器进行下线操作，下线操作分为以下三个操作：</p><ol><li>在已下线的主服务的所有从服务器中，挑选出一个从服务器，将其转换为主服务器；</li><li>将已下线的主服务的所有从服务器，复制新的主服务器；</li><li>设置已经下线的主服务为从服务，并复制新的主服务，当下线的主服务重新上线后，就会复制新的主服务了；</li></ol><h4 id="选取新的主服务器步骤"><a href="#选取新的主服务器步骤" class="headerlink" title="选取新的主服务器步骤"></a>选取新的主服务器步骤</h4><ol><li>领头的sentinel会将下线的主服务的所有从服务放到一个列表里，然后按照以下规则对列表中一个个的过滤：</li><li>过滤掉已经断线的从服务器；</li><li>过滤掉最近5s内没有回复过sentinel 的info命令的从服务；</li><li>过滤掉与主服务器连接断开时间超过（down-after-millseconds * 10）毫秒的从服务器；这样可以保证剩余从服务器的数据比较新；</li><li>然后从剩余从服务器中选举优先级高的从服务器；</li><li>如果服务器优先级相同，则选取复制偏移量大的（复制偏移量大，说明数据新）；</li><li>至此，如果还没有选举出，则对运行id进行排序，选举出运行id最小的从服务器；</li></ol><p>选举出新的主服务后，sentinel将向新的主服务器发送slave no one ，转换成新的主服务器<br>然后领头sentinel以每秒一次的频率向新的主服务发送info命令,用于判断“切换主服务操作”是否成功（当新的主服务器角色由salve变成master，说明已经切换成功了）</p><h4 id="修改从服务器的复制目标"><a href="#修改从服务器的复制目标" class="headerlink" title="修改从服务器的复制目标"></a>修改从服务器的复制目标</h4><p>新的主服务出现后，sentinel就会让所有从服务器去复制新的主服务器（通过salveof 命令实现）</p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211126111618727.png" alt="image-20211126111618727"></p><p><img src="/2022/01/27/redis-shao-bing-sentinels/image-20211126111640191.png" alt="image-20211126111640191"></p><h4 id="修改旧的主服务器的为从服务器"><a href="#修改旧的主服务器的为从服务器" class="headerlink" title="修改旧的主服务器的为从服务器"></a>修改旧的主服务器的为从服务器</h4><p>最后，将已经下线的主服务设置为从服务器，并复制新的主服务；</p><p>注意：因为这时旧的主服务已经下线，所以这时这个操作先保存到sentinel对应的实例结构中，等到旧的主服务重新上线后，sentinel就会向他发送slaveof命令，将他设置为从服务器；</p><h3 id="tilt模式"><a href="#tilt模式" class="headerlink" title="tilt模式"></a>tilt模式</h3><p>Redis哨兵依赖于系统时间,为了了解某个实例是否是可用的,其会记住最后一次成功回复PING命令的时间,然后与现在时间进行比较判断生存时间.<br>但是如果计算机时间发生了意外的变化,或者计算机现在非常忙碌,或者进程因为某些原因阻塞,哨兵可能会有意料之外的行为</p><p>TILT是一个特殊的保护模式,Sentinel的Tilt模式会在以下两种情况下开启：</p><ol><li>Sentinel进程被阻塞超过SENTINEL_TILT_TRIGGER时间（默认为2s），可能因为进程或系统I/O（内存，网络，存储）请求过多。</li><li>系统时钟调整到之前某个时间值。</li></ol><p>进入tilt模式会降低系统的可靠性(因为此时故障转移无法进行).sentinel计时器中断一般一秒十次.我们希望两次定时器中断的时间内控制在大约100毫秒.</p><p>当进入TILT模式时哨兵将会继续监视所有内容,但是</p><ul><li>停止所有的动作</li><li>会开始否定<code>SENTINEL is-master-down-by-addr</code>命令因为其不信任故障检测的能力</li></ul><p>如果30秒以内一切正常则退出TILT模式.<br>注意可以使用很多内核提供的单调时钟API已替换TILT模式.但是尚不清楚这是否是一个好的解决方案,因为当前系统避免了如果进程只是被挂起或长时间未由调度程序执行这种问题.</p><p>在计算机时间发生严重变化的时候进入<code>TILT模式</code>,并禁止除了监控以外的操作,因为此时sentinel依赖于时间,判断某个节点下线是根据PING的间隔来实现的,如果进入<code>TILT模式</code>证明时钟出现问题,此时这个sentinel已经不能被相信了.</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis客户端与服务器</title>
      <link href="/2022/01/27/redis-ke-hu-duan/"/>
      <url>/2022/01/27/redis-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="redis客户端与服务器"><a href="#redis客户端与服务器" class="headerlink" title="redis客户端与服务器"></a>redis客户端与服务器</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li><p>cli命令行</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">multiCmd</span> <span class="token punctuation">{</span>    <span class="token comment">//参数</span>    robj <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">;</span>    <span class="token comment">//参数数量</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>    <span class="token comment">//命令指针</span>    <span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> <span class="token operator">*</span>cmd<span class="token punctuation">;</span><span class="token punctuation">}</span> multiCmd<span class="token punctuation">;</span></code></pre></li><li><p>client结构(直接对于所有的数据结构进行了解释)</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//I/O复用,所以需要为每个客户端维持一个状态,多个客户端在服务器用链表链接</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token punctuation">{</span>    <span class="token comment">//client的id</span>    <span class="token class-name">uint64_t</span> id<span class="token punctuation">;</span>            <span class="token comment">/* Client incremental unique ID. */</span>    connection <span class="token operator">*</span>conn<span class="token punctuation">;</span>    <span class="token comment">//协议版本</span>    <span class="token keyword">int</span> resp<span class="token punctuation">;</span>               <span class="token comment">/* RESP protocol version. Can be 2 or 3. */</span>    <span class="token comment">//当前正在使用的数据库</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span>            <span class="token comment">/* Pointer to currently SELECTed DB. */</span>    <span class="token comment">//客户端名字</span>    robj <span class="token operator">*</span>name<span class="token punctuation">;</span>             <span class="token comment">/* As set by CLIENT SETNAME. */</span>    <span class="token comment">//缓冲区,用于储存指令</span>    sds querybuf<span class="token punctuation">;</span>           <span class="token comment">/* Buffer we use to accumulate client queries. */</span>    <span class="token comment">//在指令缓冲区中已经读到的位置</span>    <span class="token class-name">size_t</span> qb_pos<span class="token punctuation">;</span>          <span class="token comment">/* The position we have read in querybuf. */</span>    sds pending_querybuf<span class="token punctuation">;</span>   <span class="token comment">/* If this client is flagged as master, this buffer                               represents the yet not applied portion of the                               replication stream that we are receiving from                               the master. */</span>    <span class="token comment">//最近时间内缓冲区长度最大值</span>    <span class="token class-name">size_t</span> querybuf_peak<span class="token punctuation">;</span>   <span class="token comment">/* Recent (100ms or more) peak of querybuf size. */</span>    <span class="token comment">//当前指令的参数数量</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>               <span class="token comment">/* Num of arguments of current command. */</span>    <span class="token comment">//当前指令参数值</span>    robj <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">;</span>            <span class="token comment">/* Arguments of current command. */</span>    <span class="token comment">//参数有可能是重写过的,记录了原来的参数数量</span>    <span class="token keyword">int</span> original_argc<span class="token punctuation">;</span>      <span class="token comment">/* Num of arguments of original command if arguments were rewritten. */</span>    <span class="token comment">//参数有可能是重写过的,记录了原来的参数值</span>    robj <span class="token operator">*</span><span class="token operator">*</span>original_argv<span class="token punctuation">;</span>   <span class="token comment">/* Arguments of original command if arguments were rewritten. */</span>    <span class="token class-name">size_t</span> argv_len_sum<span class="token punctuation">;</span>    <span class="token comment">/* Sum of lengths of objects in argv list. */</span>    <span class="token comment">//记录客户端执行的命令</span>    <span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> <span class="token operator">*</span>cmd<span class="token punctuation">,</span> <span class="token operator">*</span>lastcmd<span class="token punctuation">;</span>  <span class="token comment">/* Last command executed. */</span>    <span class="token comment">//与之前定义的user对应,从而赋予相应的权限,NULL是管理员</span>    user <span class="token operator">*</span>user<span class="token punctuation">;</span>             <span class="token comment">/* User associated with this connection. If the                               user is set to NULL the connection can do                               anything (admin). */</span>    <span class="token comment">//指令类型,一条指令还是多条(内联)</span>    <span class="token keyword">int</span> reqtype<span class="token punctuation">;</span>            <span class="token comment">/* Request protocol type: PROTO_REQ_* */</span>    <span class="token comment">//还未读取的指令数量</span>    <span class="token keyword">int</span> multibulklen<span class="token punctuation">;</span>       <span class="token comment">/* Number of multi bulk arguments left to read. */</span>    <span class="token comment">//未读指令的</span>    <span class="token keyword">long</span> bulklen<span class="token punctuation">;</span>           <span class="token comment">/* Length of bulk argument in multi bulk request. */</span>    <span class="token comment">//回复链表</span>    list <span class="token operator">*</span>reply<span class="token punctuation">;</span>            <span class="token comment">/* List of reply objects to send to the client. */</span>    <span class="token comment">//回复链表中对象的总大小</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> reply_bytes<span class="token punctuation">;</span> <span class="token comment">/* Tot bytes of objects in reply list. */</span>    <span class="token comment">// 已发送字节，用于处理 short write </span>    <span class="token class-name">size_t</span> sentlen<span class="token punctuation">;</span>         <span class="token comment">/* Amount of bytes already sent in the current                               buffer or object being sent. */</span>    <span class="token comment">//创建客户端时间</span>    <span class="token class-name">time_t</span> ctime<span class="token punctuation">;</span>           <span class="token comment">/* Client creation time. */</span>    <span class="token keyword">long</span> duration<span class="token punctuation">;</span>          <span class="token comment">/* Current command duration. Used for measuring latency of blocking/non-blocking cmds */</span>    <span class="token comment">// 客户端最后一次和服务器互动的时间</span>    <span class="token class-name">time_t</span> lastinteraction<span class="token punctuation">;</span> <span class="token comment">/* Time of the last interaction, used for timeout */</span>    <span class="token class-name">time_t</span> obuf_soft_limit_reached_time<span class="token punctuation">;</span>    <span class="token comment">//客户端状态CLIENT_*</span>    <span class="token class-name">uint64_t</span> flags<span class="token punctuation">;</span>         <span class="token comment">/* Client flags: CLIENT_* macros. */</span>    <span class="token keyword">int</span> authenticated<span class="token punctuation">;</span>      <span class="token comment">/* Needed when the default user requires auth. */</span>    <span class="token comment">//复制状态</span>    <span class="token keyword">int</span> replstate<span class="token punctuation">;</span>          <span class="token comment">/* Replication state if this is a slave. */</span>    <span class="token keyword">int</span> repl_put_online_on_ack<span class="token punctuation">;</span> <span class="token comment">/* Install slave write handler on first ACK. */</span>    <span class="token comment">// 用于保存主服务器传来的 RDB 文件的文件描述符</span>    <span class="token keyword">int</span> repldbfd<span class="token punctuation">;</span>           <span class="token comment">/* Replication DB file descriptor. */</span>    <span class="token comment">// 读取主服务器传来的 RDB 文件的偏移量</span>    <span class="token class-name">off_t</span> repldboff<span class="token punctuation">;</span>        <span class="token comment">/* Replication DB file offset. */</span>    <span class="token comment">// 主服务器传来的 RDB 文件的大小</span>    <span class="token class-name">off_t</span> repldbsize<span class="token punctuation">;</span>       <span class="token comment">/* Replication DB file size. */</span>    sds replpreamble<span class="token punctuation">;</span>       <span class="token comment">/* Replication DB preamble. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> read_reploff<span class="token punctuation">;</span> <span class="token comment">/* Read replication offset if this is a master. */</span>    <span class="token comment">// 主服务器的复制偏移量</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> reploff<span class="token punctuation">;</span>      <span class="token comment">/* Applied replication offset if this is a master. */</span>    <span class="token comment">// 从服务器最后一次发送 REPLCONF ACK 时的偏移量</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> repl_ack_off<span class="token punctuation">;</span> <span class="token comment">/* Replication ack offset, if this is a slave. */</span>    <span class="token comment">// 从服务器最后一次发送 REPLCONF ACK 的时间</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> repl_ack_time<span class="token punctuation">;</span><span class="token comment">/* Replication ack time, if this is a slave. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> repl_last_partial_write<span class="token punctuation">;</span> <span class="token comment">/* The last time the server did a partial write from the RDB child pipe to this replica  */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> psync_initial_offset<span class="token punctuation">;</span> <span class="token comment">/* FULLRESYNC reply offset other slaves                                       copying this slave output buffer                                       should use. */</span>    <span class="token comment">// 主服务器的 master run ID</span>    <span class="token comment">// 保存在客户端，用于执行部分重同步</span>    <span class="token keyword">char</span> replid<span class="token punctuation">[</span>CONFIG_RUN_ID_SIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Master replication ID (if master). */</span>    <span class="token comment">// 从服务器的监听端口号</span>    <span class="token keyword">int</span> slave_listening_port<span class="token punctuation">;</span> <span class="token comment">/* As configured with: REPLCONF listening-port */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>slave_addr<span class="token punctuation">;</span>       <span class="token comment">/* Optionally given by REPLCONF ip-address */</span>    <span class="token keyword">int</span> slave_capa<span class="token punctuation">;</span>         <span class="token comment">/* Slave capabilities: SLAVE_CAPA_* bitwise OR. */</span>    <span class="token comment">//事务状态</span>    multiState mstate<span class="token punctuation">;</span>      <span class="token comment">/* MULTI/EXEC state */</span>    <span class="token comment">//阻塞类型</span>    <span class="token keyword">int</span> btype<span class="token punctuation">;</span>              <span class="token comment">/* Type of blocking op if CLIENT_BLOCKED. */</span>    <span class="token comment">//阻塞状态</span>    blockingState bpop<span class="token punctuation">;</span>     <span class="token comment">/* blocking state */</span>    <span class="token comment">// 最后被写入的全局复制偏移量</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> woff<span class="token punctuation">;</span>         <span class="token comment">/* Last write global replication offset. */</span>    list <span class="token operator">*</span>watched_keys<span class="token punctuation">;</span>     <span class="token comment">/* Keys WATCHED for MULTI/EXEC CAS */</span>    <span class="token comment">// 这个字典记录了客户端所有订阅的频道</span>    <span class="token comment">// 键为频道名字，值为 NULL</span>    <span class="token comment">// 也即是，一个频道的集合</span>    dict <span class="token operator">*</span>pubsub_channels<span class="token punctuation">;</span>  <span class="token comment">/* channels a client is interested in (SUBSCRIBE) */</span>    <span class="token comment">// 链表，包含多个 pubsubPattern 结构</span>    <span class="token comment">// 记录了所有订阅频道的客户端的信息</span>    <span class="token comment">// 新 pubsubPattern 结构总是被添加到表尾</span>    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span>  <span class="token comment">/* patterns a client is interested in (SUBSCRIBE) */</span>    sds peerid<span class="token punctuation">;</span>             <span class="token comment">/* Cached peer ID. */</span>    sds sockname<span class="token punctuation">;</span>           <span class="token comment">/* Cached connection target address. */</span>    listNode <span class="token operator">*</span>client_list_node<span class="token punctuation">;</span> <span class="token comment">/* list node in client list */</span>    listNode <span class="token operator">*</span>paused_list_node<span class="token punctuation">;</span> <span class="token comment">/* list node within the pause list */</span>    RedisModuleUserChangedFunc auth_callback<span class="token punctuation">;</span> <span class="token comment">/* Module callback to execute                                               * when the authenticated user                                               * changes. */</span>    <span class="token keyword">void</span> <span class="token operator">*</span>auth_callback_privdata<span class="token punctuation">;</span> <span class="token comment">/* Private data that is passed when the auth                                   * changed callback is executed. Opaque for                                   * Redis Core. */</span>    <span class="token keyword">void</span> <span class="token operator">*</span>auth_module<span class="token punctuation">;</span>      <span class="token comment">/* The module that owns the callback, which is used                             * to disconnect the client if the module is                             * unloaded for cleanup. Opaque for Redis Core.*/</span>    <span class="token comment">/* If this client is in tracking mode and this field is non zero,     * invalidation messages for keys fetched by this client will be send to     * the specified client ID. */</span>    <span class="token class-name">uint64_t</span> client_tracking_redirection<span class="token punctuation">;</span>    rax <span class="token operator">*</span>client_tracking_prefixes<span class="token punctuation">;</span> <span class="token comment">/* A dictionary of prefixes we are already                                      subscribed to in BCAST mode, in the                                      context of client side caching. */</span>    <span class="token comment">/* In clientsCronTrackClientsMemUsage() we track the memory usage of     * each client and add it to the sum of all the clients of a given type,     * however we need to remember what was the old contribution of each     * client, and in which category the client was, in order to remove it     * before adding it the new value. */</span>    <span class="token class-name">uint64_t</span> client_cron_last_memory_usage<span class="token punctuation">;</span>    <span class="token keyword">int</span>      client_cron_last_memory_type<span class="token punctuation">;</span>    <span class="token comment">/* Response buffer */</span>    <span class="token comment">// 回复偏移量</span>    <span class="token keyword">int</span> bufpos<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> buf_usable_size<span class="token punctuation">;</span> <span class="token comment">/* Usable size of buffer. */</span>    <span class="token comment">/* Note that 'buf' must be the last field of client struct, because memory     * allocator may give us more memory than our apply for reducing fragments,     * but we want to make full use of given memory, i.e. we may access the     * memory after 'buf'. To avoid make others fields corrupt, 'buf' must be     * the last one. */</span>    <span class="token comment">//回复缓冲区</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>PROTO_REPLY_CHUNK_BYTES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> client<span class="token punctuation">;</span></code></pre><p>所有的client属性连成了一个链表,保存在redisServer的clients属性中,对于不同状态的client也有其他的链表保存.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span><span class="token comment">//...</span><span class="token comment">//链表,保存了所有的客户端状态</span>    list <span class="token operator">*</span>clients<span class="token punctuation">;</span>              <span class="token comment">/* List of active clients */</span>    <span class="token comment">//保存所有的待关闭客户端</span>    list <span class="token operator">*</span>clients_to_close<span class="token punctuation">;</span>     <span class="token comment">/* Clients to close asynchronously */</span>    <span class="token comment">//将要写的客户端列表</span>    list <span class="token operator">*</span>clients_pending_write<span class="token punctuation">;</span> <span class="token comment">/* There is to write or install handler. */</span>    <span class="token comment">//将要读的客户端列表(已经知道有指令输入了)</span>    list <span class="token operator">*</span>clients_pending_read<span class="token punctuation">;</span>  <span class="token comment">/* Client has pending read socket buffers. */</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="客户端属性"><a href="#客户端属性" class="headerlink" title="客户端属性"></a>客户端属性</h3><p>包含通用属性(所有客户端执行基础功能都必须需要的)和特定功能(执行特定功能)相关的属性</p><ul><li><p>套接字描述符uint64_t id;</p><ul><li>伪客户端:id为-1,载入AOF文件时使用,或者是执行Lua脚本中包含的redis命令</li><li>普通客户端的id大于-1,表示是正常的客户端</li></ul></li><li><p>名字robj *name;</p><ul><li>可有可无,一个robj对象,没有的时候指定为NULL</li></ul></li><li><p>标志uint64_t flags;</p><ul><li><p>表示了当前客户端的角色和状态</p></li><li><p>可以是单个也可以是多个标志的二进制取或.见CLIENT_*的定义可知,都是一位表示的</p></li><li><p>```c#<br>/* Client flags <em>/<br>//主从服务器进行复制时,相互都是客户端的关系,slave和master区分两个服务器<br>#define CLIENT_SLAVE (1&lt;&lt;0)   /</em> This client is a replica <em>/<br>#define CLIENT_MASTER (1&lt;&lt;1)  /</em> This client is a master <em>/<br>//正在执行monitor指令,是一个从客户端<br>#define CLIENT_MONITOR (1&lt;&lt;2) /</em> This client is a slave monitor, see MONITOR <em>/<br>//执行事务<br>#define CLIENT_MULTI (1&lt;&lt;3)   /</em> This client is in a MULTI context <em>/<br>//客户端被阻塞<br>#define CLIENT_BLOCKED (1&lt;&lt;4) /</em> The client is waiting in a blocking operation <em>/<br>//事务使用WATCH监视的数据库键已经被修改,EXEC执行过程中会直接fail<br>#define CLIENT_DIRTY_CAS (1&lt;&lt;5)<br>//用户对这个客户端执行了 CLIENT KILL命令或者客户端发送给服务器的命令中协议内容有误,<br>//服务器会将客户端积存在输出缓冲区中的所有内容发送给客户端,然后关闭客户端<br>#define CLIENT_CLOSE_AFTER_REPLY (1&lt;&lt;6) /</em> Close after writing entire reply. <em>/<br>//从阻塞中解除,只有在之前阻塞过才可用<br>#define CLIENT_UNBLOCKED (1&lt;&lt;7) /</em> This client was unblocked and is stored in</p><pre><code>                              server.unblocked_clients */</code></pre><p>//专门处理Lua脚本的客户端<br>#define CLIENT_LUA (1&lt;&lt;8) /* This is a non connected client used by Lua <em>/<br>//客户端向集群节点（ 运行在集群模式下的服务器） 发送了ASKING 命令<br>#define CLIENT_ASKING (1&lt;&lt;9)     /</em> Client issued the ASKING command <em>/<br>//客户端的输出缓冲区大小超出了服务器允许的范围，<br>//服务器会在下一次执行 serverCron 函数时关闭这个客户端,以免影响服务器的稳定性<br>//积存在输出缓冲区中的所有内容会直接被释放,不会返回给客户端.<br>#define CLIENT_CLOSE_ASAP (1&lt;&lt;10)/</em> Close this client ASAP <em>/<br>//服务器使用 UNIX 套接字来连接客户端<br>#define CLIENT_UNIX_SOCKET (1&lt;&lt;11) /</em> Client connected via Unix domain socket <em>/<br>//事务在命令入队时出现了错误, 和CLIENT_DIRTY_CAS 都表示了事务不安全,EXEC会执行失败<br>#define CLIENT_DIRTY_EXEC (1&lt;&lt;12)  /</em> EXEC will fail for errors while queueing <em>/<br>//在主从服务器进行命令传播期间,从服务器需要向主服务器发送REPLICATION ACK命令<br>//发送命令之前需要打开这个标志以允许发送操作执行<br>#define CLIENT_MASTER_FORCE_REPLY (1&lt;&lt;13)  /</em> Queue replies even if is master <em>/<br>//执行PUBSUB指令时打开,强制服务器将当前执行的命令写人到 AOF 文件里面<br>#define CLIENT_FORCE_AOF (1&lt;&lt;14)   /</em> Force AOF propagation of current cmd. <em>/<br>//执行SCRIPT LOADD指令时打开,强制主服务器将当前执行的命令复制给所有从服务器<br>#define CLIENT_FORCE_REPL (1&lt;&lt;15)  /</em> Force replication of current cmd. <em>/<br>//主服务器不能使用PSYNC命令与当前低版本从服务器进行同步.<br>//这个标志只能在 REDIS_SLAVE 标志处于打开状态时使用<br>#define CLIENT_PRE_PSYNC (1&lt;&lt;16)   /</em> Instance don’t understand PSYNC. <em>/<br>#define CLIENT_READONLY (1&lt;&lt;17)    /</em> Cluster client is in read-only state. <em>/<br>#define CLIENT_PUBSUB (1&lt;&lt;18)      /</em> Client is in Pub/Sub mode. <em>/<br>#define CLIENT_PREVENT_AOF_PROP (1&lt;&lt;19)  /</em> Don’t propagate to AOF. <em>/<br>#define CLIENT_PREVENT_REPL_PROP (1&lt;&lt;20)  /</em> Don’t propagate to slaves. <em>/<br>#define CLIENT_PREVENT_PROP (CLIENT_PREVENT_AOF_PROP|CLIENT_PREVENT_REPL_PROP)<br>#define CLIENT_PENDING_WRITE (1&lt;&lt;21) /</em> Client has output to send but a write</p><pre><code>                                    handler is yet not installed. */</code></pre><p>#define CLIENT_REPLY_OFF (1&lt;&lt;22)   /* Don’t send replies to client. <em>/<br>#define CLIENT_REPLY_SKIP_NEXT (1&lt;&lt;23)  /</em> Set CLIENT_REPLY_SKIP for next cmd <em>/<br>#define CLIENT_REPLY_SKIP (1&lt;&lt;24)  /</em> Don’t send just this reply. <em>/<br>#define CLIENT_LUA_DEBUG (1&lt;&lt;25)  /</em> Run EVAL in debug mode. <em>/<br>#define CLIENT_LUA_DEBUG_SYNC (1&lt;&lt;26)  /</em> EVAL debugging without fork() <em>/<br>#define CLIENT_MODULE (1&lt;&lt;27) /</em> Non connected client used by some module. <em>/<br>#define CLIENT_PROTECTED (1&lt;&lt;28) /</em> Client should not be freed for now. <em>/<br>#define CLIENT_PENDING_READ (1&lt;&lt;29) /</em> The client has pending reads and was put</p><pre><code>                                   in the list of clients we can read                                   from. */</code></pre><p>#define CLIENT_PENDING_COMMAND (1&lt;&lt;30) /* Indicates the client has a fully</p><pre><code>                                    * parsed command ready for execution. */</code></pre><p>#define CLIENT_TRACKING (1ULL&lt;&lt;31) /* Client enabled keys tracking in order to</p><pre><code>                               perform client side caching. */</code></pre><p>#define CLIENT_TRACKING_BROKEN_REDIR (1ULL&lt;&lt;32) /* Target client is invalid. <em>/<br>#define CLIENT_TRACKING_BCAST (1ULL&lt;&lt;33) /</em> Tracking in BCAST mode. <em>/<br>#define CLIENT_TRACKING_OPTIN (1ULL&lt;&lt;34)  /</em> Tracking in opt-in mode. <em>/<br>#define CLIENT_TRACKING_OPTOUT (1ULL&lt;&lt;35) /</em> Tracking in opt-out mode. <em>/<br>#define CLIENT_TRACKING_CACHING (1ULL&lt;&lt;36) /</em> CACHING yes/no was given,</p><pre><code>                                          depending on optin/optout mode. */</code></pre><p>#define CLIENT_TRACKING_NOLOOP (1ULL&lt;&lt;37) /* Don’t send invalidation messages</p><pre><code>                                         about writes performed by myself.*/</code></pre><p>#define CLIENT_IN_TO_TABLE (1ULL&lt;&lt;38) /* This client is in the timeout table. <em>/<br>#define CLIENT_PROTOCOL_ERROR (1ULL&lt;&lt;39) /</em> Protocol error chatting with it. <em>/<br>#define CLIENT_CLOSE_AFTER_COMMAND (1ULL&lt;&lt;40) /</em> Close after executing commands</p><pre><code>                                           * and writing entire reply. */</code></pre><p>#define CLIENT_DENY_BLOCKING (1ULL&lt;&lt;41) /* Indicate that the client should not be blocked.</p><pre><code>                                       currently, turned on inside MULTI, Lua, RM_Call,                                       and AOF client */</code></pre><p>#define CLIENT_REPL_RDBONLY (1ULL&lt;&lt;42) /* This client is a replica that only wants RDB without replication buffer. */</p><pre class="language-none"><code class="language-none">      - PUBSUB命令:本身不修改数据库,但是向频道的所有订阅者发送消息的行为带有副作用， 接收到消息的所有客户端的状态都会因为这个命令而改变,所以也需要写入AOF.  - SCRIPT LOAD命令:类似的,它修改了服务器状态,也带有副作用,同时因为涉及到主从服务器,CLIENT_FORCE_REPL将指令发给所有的从服务器.- 输入缓冲区  - 源代码：    ```c#    typedef struct client {    //缓冲区,用于储存指令        sds querybuf;           /* Buffer we use to accumulate client queries. */    }client;</code></pre></li><li><p>保存用户发送的命令请求,根据输入内容动态变化大小</p></li></ul></li><li><p>命令和命令参数</p><ul><li><p>源代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token punctuation">{</span><span class="token comment">//当前指令的参数数量</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>               <span class="token comment">/* Num of arguments of current command. */</span>    <span class="token comment">//当前指令参数值</span>    robj <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">;</span>            <span class="token comment">/* Arguments of current command. */</span>    <span class="token comment">//参数有可能是重写过的,记录了原来的参数数量</span>    <span class="token keyword">int</span> original_argc<span class="token punctuation">;</span>      <span class="token comment">/* Num of arguments of original command if arguments were rewritten. */</span>    <span class="token comment">//参数有可能是重写过的,记录了原来的参数值</span>    robj <span class="token operator">*</span><span class="token operator">*</span>original_argv<span class="token punctuation">;</span>   <span class="token comment">/* Arguments of original command if arguments were rewritten. */</span>    <span class="token class-name">size_t</span> argv_len_sum<span class="token punctuation">;</span>    <span class="token comment">/* Sum of lengths of objects in argv list. */</span>    <span class="token punctuation">}</span>client<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>命令实现函数</p><ul><li><p>源代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token punctuation">{</span><span class="token comment">//记录客户端执行的命令</span>    <span class="token keyword">struct</span> <span class="token class-name">redisCommand</span> <span class="token operator">*</span>cmd<span class="token punctuation">,</span> <span class="token operator">*</span>lastcmd<span class="token punctuation">;</span>  <span class="token comment">/* Last command executed. */</span><span class="token punctuation">}</span>client<span class="token punctuation">;</span></code></pre></li><li><p>根据项argv[0] 的值,在命令表中査找命令所对应的命令实现函数,找到之后将客户端状态的cmd执行那个在命令表之中的这个结构,这个结构保存了命令的实现函数、 命令的标志 、 命令应该给定的参数个数、 命令的总执行次数和总消耗时长等统计信息  </p></li></ul></li><li><p>输出缓冲区</p><ul><li><p>源代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token comment">/* Response buffer */</span>    <span class="token comment">// 回复偏移量</span>    <span class="token keyword">int</span> bufpos<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> buf_usable_size<span class="token punctuation">;</span> <span class="token comment">/* Usable size of buffer. */</span>    <span class="token comment">/* Note that 'buf' must be the last field of client struct, because memory     * allocator may give us more memory than our apply for reducing fragments,     * but we want to make full use of given memory, i.e. we may access the     * memory after 'buf'. To avoid make others fields corrupt, 'buf' must be     * the last one. */</span>    <span class="token comment">//回复缓冲区,放在最后,因为内存分配的时候可能多给了一些内存,实际上并没有用到</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>PROTO_REPLY_CHUNK_BYTES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> client<span class="token punctuation">;</span></code></pre></li><li><p>当 buf 数组的空间已经用完,或者回复因为太大而没办法放进 buf 数组里面时， 服务器就会开始使用可变大小缓冲区<code>list *reply;</code>,一个链表连接多个字符串对象,可以保存很长的回复信息</p></li></ul></li><li><p>身份验证</p><ul><li>int authenticated;</li><li>启用了身份验证之后,当属性为0时,除了AUTH指令,其他指令都会被拒绝.</li></ul></li><li><p>时间</p><ul><li>源代码：<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//创建客户端时间</span>   <span class="token class-name">time_t</span> ctime<span class="token punctuation">;</span>           <span class="token comment">/* Client creation time. */</span>   <span class="token keyword">long</span> duration<span class="token punctuation">;</span>          <span class="token comment">/* Current command duration. Used for measuring latency of blocking/non-blocking cmds */</span>   <span class="token comment">// 客户端最后一次和服务器互动的时间,即客户端空转时间</span>   <span class="token class-name">time_t</span> lastinteraction<span class="token punctuation">;</span> <span class="token comment">/* Time of the last interaction, used for timeout */</span><span class="token comment">//达到buf软性限制的时间,太长的话会被kill</span>   <span class="token class-name">time_t</span> obuf_soft_limit_reached_time<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>限制缓冲区大小</p><ul><li>硬性限制（ hard limit ): 如果输出缓冲区的大小超过了硬性限制所设置的大小， 那么服务器立即关闭客户端。</li><li>软性限制（ softlimit ): 如果输出缓冲区的大小超过了软性限制所设置的大小， 但还没超过硬性限制， 那么服务器将使用客户端状态结构的 <code>obuf_soft_limit_ reached_time </code>属性记录下客户端到达软性限制的起始时间； 之后服务器会继续监视客户端， 如果输出缓冲区的大小一直超出软性限制， 并且持续时间超过服务器设定的时长， 那么服务器将关闭客户端;如果不再超过的话就直接清零属性值,不关闭客户端</li></ul></li></ul><h3 id="客户端的类型"><a href="#客户端的类型" class="headerlink" title="客户端的类型"></a>客户端的类型</h3><ul><li><p>普通客户端</p><ul><li>直接按照之前的模式执行相关程序即可</li></ul></li><li><p>Lua脚本的伪客户端</p><ul><li>Lua_client 伪客户端在服务器初始化的时候就创建了,服务器运行的整个生命期中会一直存在,服务器被关闭时， 这个客户端才会被关闭</li></ul></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="命令请求的执行过程"><a href="#命令请求的执行过程" class="headerlink" title="命令请求的执行过程"></a>命令请求的执行过程</h3><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>Redis 服务器的命令请求来自 Redis 客户端， 当用户在客户端中键人一个命令请求时，客户端会将这个命令请求转换成协议格式， 然后通过连接到服务器的套接字， 将协议格式的命令请求发送给服务器</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRid1<span class="token text string">[用户]</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">键入命令请求</span><span class="token arrow operator">--&gt;</span></span>id2<span class="token text string">[客户端]</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">将命令转换为协议的格式并发送</span><span class="token arrow operator">--&gt;</span></span>id3<span class="token text string">[服务器]</span></code></pre><h4 id="读取请求"><a href="#读取请求" class="headerlink" title="读取请求"></a>读取请求</h4><p>客户端与服务器之间的连接套接字因为客户端的写入而变得可读,服务器将调用命令请求处理器:</p><ol><li>读取套接字中协议格式的命令请求， 并保存到客户端的输入缓冲区里面</li><li>对输入缓冲区中的命令请求进行分析， 提取出命令请求中包含的命令参数， 以及命<br>令参数的个数， 然后分别将参数和参数个数保存到客户端的argv属性和argc 属性里面</li><li>调用命令执行器， 执行客户端指定的命令  </li></ol><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="查找命令实现"><a href="#查找命令实现" class="headerlink" title="查找命令实现"></a>查找命令实现</h5><p>根据客户端状态的 argv [ 0 ] 参数， 在命令表中查找参数所指定的命令， 并将找到的命令保存到客户端的 cmd 属性.</p><blockquote><p>命令表(redisCommandTable)是一个字典,键是命令名字,值是redisCommand结构,记录了命令的实现信息</p></blockquote><h5 id="执行预备操作"><a href="#执行预备操作" class="headerlink" title="执行预备操作"></a>执行预备操作</h5><p>检查上一步执行结果和执行命令的环境,权限等</p><h5 id="调用命令实现函数"><a href="#调用命令实现函数" class="headerlink" title="调用命令实现函数"></a>调用命令实现函数</h5><p>执行<code>client-&gt;cmd-&gt;proc(client);</code>,执行函数之后产生相应的命令回复,保存在客户端状态的输出缓冲区(buf和reply)</p><h5 id="执行后续工作"><a href="#执行后续工作" class="headerlink" title="执行后续工作"></a>执行后续工作</h5><p>记录日志等后续</p><h4 id="将回复发送给客户端"><a href="#将回复发送给客户端" class="headerlink" title="将回复发送给客户端"></a>将回复发送给客户端</h4><p>命令实现函数会将命令回复保存到客户端的输出缓冲区里面， 并为客户端的套接字关联命令回复处理器， 当客户端套接字变为可写状态时， 服务器就会执行命令回复处理器， 将保存在客户端输出缓冲区中的命令回复发送给客户端。  发送完之后将缓冲区清空.</p><h4 id="客户端接受并打印命令回复"><a href="#客户端接受并打印命令回复" class="headerlink" title="客户端接受并打印命令回复"></a>客户端接受并打印命令回复</h4><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211112225309381.png" alt="image-20211112225309381"></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>SET KEY VALUE</p><ol><li><p>先由客户端转换成协议<code>*3\r\n$3\r\nSET\r\n$3\r\nKEY\r\n$5\r\nVALUE\r\n  </code>并发送给服务器</p></li><li><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211112111306721.png" alt="image-20211112111306721"><img src="/2022/01/27/redis-ke-hu-duan/image-20211112111326098.png" alt="image-20211112111326098"></p></li><li><p>命令执行过程</p><ol><li><p>查找命令实现</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211112195218882.png" alt="image-20211112195218882"></p></li><li><p>调用实现函数</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211112223826504.png" alt="image-20211112223826504"></p></li><li><p>保存回复到缓冲区</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211112224130202.png" alt="image-20211112224130202"></p></li></ol></li><li><p>将<code>+OK\r\n</code>发送给客户端</p></li><li><p>客户端转换格式为<code>OK\n</code>并显示</p></li></ol><h3 id="serverCron函数"><a href="#serverCron函数" class="headerlink" title="serverCron函数"></a>serverCron函数</h3><ul><li><p>默认每隔 100 毫秒执行一次</p></li><li><p>负责管理服务器的资源， 并保持服务器自身的良好运转</p></li><li><p>更新的内容:</p><ul><li><p>更新服务器时间缓存</p><p>实时获取系统当前时间开销比较大,对于时间精度要求不是很高的使用地方使用缓存时间就可以.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//保存秒级精度的系统当前UNIX时间戳</span>redisAtomic <span class="token class-name">time_t</span> unixtime<span class="token punctuation">;</span><span class="token comment">//毫秒级精度的当前时间戳</span><span class="token class-name">mstime_t</span> mstime<span class="token punctuation">;</span>            <span class="token comment">//微秒级精度的当前时间戳</span><span class="token class-name">ustime_t</span> ustime<span class="token punctuation">;</span></code></pre><p>serverCron就是定时更新时间缓存的</p></li><li><p>更新LRU时钟</p></li><li><p>更新redis对象的空转时长属性</p></li><li><p>更新服务器每秒执行命令次数</p><p>嵌套调用的trackOperationsPerSecond函数抽样调查服务器一秒执行命令数量</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//抽样记录服务器每秒执行的命令数量</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> last_sample_time<span class="token punctuation">;</span> <span class="token comment">/* Timestamp of last sample in ms */</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> last_sample_count<span class="token punctuation">;</span><span class="token comment">/* Count in last sample */</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> samples<span class="token punctuation">[</span>STATS_METRIC_SAMPLES<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx<span class="token punctuation">;</span>    <span class="token punctuation">}</span> inst_metric<span class="token punctuation">[</span>STATS_METRIC_COUNT<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>每次执行和上次执行的记录结果做比较,估算这一秒的执行情况</p></li><li><p>更新服务器内存峰值记录</p><pre class="language-none"><code class="language-none">size_t stat_peak_memory;//已用内存峰值</code></pre><p>查看使用的内存数量,记录使用时的最大值</p></li><li><p>处理sigterm信号</p><p>为信号关联处理器sigtermHandler函数,负责在服务器接到sigterm信号的时候根据shutdown_asap决定是否关闭服务器(关闭之前先完成持久化操作)</p></li><li><p>管理客户端资源</p><p>clientsCron函数对客户端进行检查,连接是否超时,输入缓冲区是否过大.</p></li><li><p>管理数据库资源</p><p>databasesCron函数对数据库和其中的过期键,字典进行检查</p></li><li><p>执行被延迟的BGREWRITEAOGF</p><p>在服务器执行bgsave命令的期间， 如果客户端向服务器发来 BGREWRITEAOF 命令，那 么 服 务 器 会 将 命 令 的 执 行 时 间 延 迟 到 bgsave命 令 执 行 完 毕 之 后 </p></li></ul></li></ul><h3 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h3><h4 id="初始化状态结构"><a href="#初始化状态结构" class="headerlink" title="初始化状态结构"></a>初始化状态结构</h4><p>创建一个<code>struct redisServer</code>实例变量,设置默认值,创建命令表</p><p>主要由initServerConfig函数完成</p><h4 id="载入配置选项"><a href="#载入配置选项" class="headerlink" title="载入配置选项"></a>载入配置选项</h4><p>根据redis.config文件或者启动时指定的配置项配置其他选项</p><h4 id="初始化服务器数据结构"><a href="#初始化服务器数据结构" class="headerlink" title="初始化服务器数据结构"></a>初始化服务器数据结构</h4><p>创建服务器需要的除命令表之外的其他数据结构,需要用到之前的配置信息</p><p>initServre负责初始化这些数据结构和一些其他的设置操作,包括:</p><ul><li>为服务器设置进程信号处理器。</li><li>创建共享对象： 这些对象包含 Redis 服务器经常用到的一些值， 比如包含”OK”和”ERR”回复的字符串对象， 包含整数 1 到 10000 的字符串对象等等， 服务器通过重用这些共享对象来避免反复创建相同的对象。</li><li>打开服务器的监听端口， 并为监听套接字关联连接应答事件处理器， 等待服务器正<br>式运行时接受客户端的连接。</li><li>为 serverCron 函数创建时间事件， 等待服务器正式运行时执行 serverCron 函数。</li><li>如果 AOF 持久化功能已经打开， 那么打开现有的 AOF 文件， 如果 AOF 文件不存在，<br>那么创建并打开一个新的 AOF 文件， 为 AOF 写入做好准备。</li><li>初始化服务器的后台 I/O 模块（ bio )， 为将来的 I/O 操作做好准备  </li></ul><h4 id="还原数据库状态"><a href="#还原数据库状态" class="headerlink" title="还原数据库状态"></a>还原数据库状态</h4><p>载入AOF或者RDB文件</p><h4 id="执行事件循环"><a href="#执行事件循环" class="headerlink" title="执行事件循环"></a>执行事件循环</h4><p>打开事件循环,之后就可以接受命令</p><h1 id="多机数据库实现"><a href="#多机数据库实现" class="headerlink" title="多机数据库实现"></a>多机数据库实现</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>SLAVEOF可以让从服务器复制主服务器的内容,二者保存的数据是一致的</p><h3 id="旧版复制功能"><a href="#旧版复制功能" class="headerlink" title="旧版复制功能"></a>旧版复制功能</h3><p>以前直接在重连的时候复制整个数据库的RDB文件,bgsave开销非常大(相当于重新执行了一次sync,期间对于主服务器不能执行其他命令,需要保存在缓冲区)</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211117222257569.png" alt="image-20211117222257569"></p><p>执行SYNC命令:</p><ul><li>主服务器需要执行BGSAVE命令来生成 RDB 文件， 这个生成操作会耗费主服务器大量的 CPU、 内存和磁盘 I/O 资源。</li><li>主服务器需要将自己生成的 RDB 文件发送给从服务器， 这个发送操作会耗费主从服务器大量的网络资源（ 带宽和流量 ）， 并对主服务器响应命令请求的时间产生影响。</li><li>接收到 RDB 文件的从服务器需要载入主服务器发来的 RDB 文件， 并且在载入期间， 从服务器会因为阻塞而没办法处理命令请求。  </li></ul><p>每次主服务器改数据库之后都要传播该条命令</p><h3 id="新版复制功能"><a href="#新版复制功能" class="headerlink" title="新版复制功能"></a>新版复制功能</h3><p>使用PSYNC实现</p><ul><li>完整重同步:初始复制主服务器,与之前的SYNC没有什么不同</li><li>部分重同步:断线后重连复制,条件允许时直接将断开连接期间的写命令发给从服务器.</li></ul><p>重连之后从服务器发送PSYNC命令,主服务器向从服务器返回+CONTINUE回复,表示执行部分重同步,从服务器接受回复,准备执行部分重同步,主服务器发送断线期间的写命令,从服务器接受并执行,完成同步</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118101021620.png" alt="image-20211118101021620"></p><h4 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h4><p>主从服务器都会维护复制偏移量,主服务器发送n数据,从服务器接受n数据,都会分别给自己的复制偏移量添加n.</p><p>如果master和slave的偏移量是相同的，那么主从数据处于一致的状态</p><h4 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h4><p>主服务器维护的一个FIFO队列,固定默认1MB大小</p><p>当master向slave传播命令时，会将命令<strong>写入到复制积压缓冲区</strong>,复制积压缓冲区记录了最近向slave传播的命令；并且为每个字节记录了相应的复制偏移量</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118105510397.png" alt="image-20211118105510397"></p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118105606106.png" alt="image-20211118105606106"></p><p>当slave断线后重新连接master时，向master发送PSYNC命令会将自己的复制偏移量发送给master。</p><p>master会根据这个偏移量决定对slave执行<strong>部分同步</strong>还是<strong>完全同步；</strong></p><ul><li>slave的偏移量在复制积压缓冲区，执行部分同步 ；</li><li>slave的偏移量不在复制积压缓冲区，则执行完全同步；</li></ul><h4 id="服务器运行ID"><a href="#服务器运行ID" class="headerlink" title="服务器运行ID"></a>服务器运行ID</h4><p>slave对master初次复制时，会保存master的运行id；</p><ul><li><p>当slave重新连接到master时，slave向master发送之前保存的mater run id；</p></li><li><p>如果slave保存的master run id和重新连接的master run id不一致，（换了master），则执行完全同步；</p></li></ul><p>相反，如果一致则尝试执行部分同步</p><h3 id="PSYNC执行过程"><a href="#PSYNC执行过程" class="headerlink" title="PSYNC执行过程"></a>PSYNC执行过程</h3><p><strong>PSYNC命令调用方式有两种：</strong></p><ol><li><p><strong><code>PSYNC ? -1</code> 全量复制</strong><br>当从服务没有复制过主服务器，或者从服务执行过<code>SLAVEOF NO ONE</code>命令（取消复制），那么从服务将发送<code>PSYNC ？-1</code>命令；</p></li><li><p><strong><code>PSYNC &lt;runid&gt; &lt;offset&gt; </code>部分复制</strong><br>从服务已经复制过主服务器，那么从服务将向主服务器发送<code>PSYNC &lt;runid&gt; &lt;offset&gt;</code>， runid是主服务器的id，offset服务器当前的偏移量；</p><p>主服务器接受到<code>PSYNC &lt;runid&gt; &lt;offset&gt;</code> 命令后，主服务会判断是否能“部分同步”，向从服务回复相应的命令；</p></li></ol><p><strong>主服务向从服务的三种回复：</strong></p><ol><li><strong><code>+FULLRESYNC &lt;runid&gt; &lt;offset&gt;</code> 执行完全重同步；</strong></li><li><strong><code>+CONTINUE</code> 执行部分重同步；</strong></li><li><strong><code>-ERR</code> 不支持psync同步操作，从服务将发送sync命令到主服务器,执行完全重同步；</strong></li></ol><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118170432055.png" alt="image-20211118170432055"></p><p>注意图片有个情况没写出来</p><ol><li><p>设置主服务器的地址和端口</p><p>通过向从服务器发送SLAVE命令，可以让一个从服务器去复制一个主服务器</p><p>slaveof要做的主要是给“从服务”设置的“主服务”地址和端口，会保存到从服务器的<strong>masterhost</strong>和<strong>masterport</strong>属性中(<strong>replication.c/replicaofCommand</strong>)</p><p>slaveof是一个异步命令，完成设置后，会给客户端返回OK; 实际复制工作将在OK返回后真正开始执行；</p><p>执行<code>SLAVEOF 127.0.0.1&nbsp;6379</code>,设置好之后</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118204602440.png" alt="image-20211118204602440"></p></li><li><p>建立套接字连接</p><p>根据前一步保存的属性开始连接主服务器套接字(<strong>server.c/serverCron</strong> &gt; <strong>replication.c/replicationCron</strong> &gt; <strong>replication.c/connectWithMaster</strong>)</p><p>如果从服务和主服务器连接成功，从服务器会给这个套接字关联一个处理复制工作的文件处理器(<strong>replication.c/syncWithMaster</strong>),处理器完成后续工作,包括接受RDB文件,接受后续传来的写命令</p><p>主服务器在接受（ accept ) 从服务器的套接字连接之后， 将为该套接字创建相应的客户端状态， 并将从服务器看作是一个连接到主服务器的客户端来对待， 这时从服务器将同时具有服务器和客户端两个身份. </p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118221239382.png" alt="image-20211118221239382"></p></li><li><p>发送ping命令</p><ul><li>检查套接字连接情况</li><li>检查主服务器是否能正常处理命令</li></ul><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118221522707.png" alt="image-20211118221522707"></p></li><li><p>身份验证</p><ul><li>如果从服务器设置了 masterauth 选项， 那么进行身份验证。</li><li>如果从服务器没有设置 masterauth 选项， 那么不进行身份验证。</li></ul><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118221720561.png" alt="image-20211118221720561"></p></li><li><p>发送端口信息</p><p>从服务将执行<code>REPLCONF listen-port &lt;port-number&gt;</code>，向主服务器发送从服务监听的端口号</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118221853890.png" alt="image-20211118221853890"></p><p>主服务器接受到这个命令后，将从服务的端口号记录到客户端状态中的 slave_listening_port属性中</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118221942590.png" alt="image-20211118221942590"></p></li><li><p>同步</p><p>从服务器向主服务器发送PSYNC命令</p><p>在同步操作执行之前， 只有从服务器是主服务器的客户端， 但是在执行同步操作之后， 他们互为客户端,因为主服务器也需要发送写命令给从服务器</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211118223802314.png" alt="image-20211118223802314"></p></li><li><p>命令传播</p><p>写命令传播给从服务器</p></li></ol><h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><p>在命令传播阶段，从服务默认每秒一次的频率向主服务器发送 <code>REPLCONF ACK &lt;replicaiotn_offset&gt; </code>(<code>replication_offset</code>是当前从服务器的复制偏移量)</p><p>心跳检测的代码入口位于：<code>server.c/serverCron &gt; replication.c/replicationCron &gt;  replication.c/replicationSendAck</code></p><h4 id="检测与主服务的网络连接状态"><a href="#检测与主服务的网络连接状态" class="headerlink" title="检测与主服务的网络连接状态"></a><strong>检测与主服务的网络连接状态</strong></h4><p>主从服务器通过发送和接受<code>REPLCONF</code> 命令检查网络连接是否正常；<br>如果从服务器超过一秒没有接收到从服务的<code>REPLCONF</code> 命令，主服务器就知道从服务连接出了问题； </p><p>主服务器对每个从服务器保存一个lag值记录上次收到心跳包的时间</p><h4 id="辅助实现min-slave选项"><a href="#辅助实现min-slave选项" class="headerlink" title="辅助实现min-slave选项"></a><strong>辅助实现min-slave选项</strong></h4><p>redis的<code>min-slave-to-write</code>和<code>min-salve-max-lag</code>可以防止主服务在不安全的情况下执行写命令；</p><p>例如 主服务的min-slave-to-write和min-salve-max-lag配置如下：<br>min-salve-max-lag 10<br>min-slave-to-write 3</p><p>那么从服务的数量少于3个，或者3个从服务的延时（lag）值大于等于10秒时，主服务都不能执行写命令；</p><h4 id="检测命令丢失"><a href="#检测命令丢失" class="headerlink" title="检测命令丢失"></a><strong>检测命令丢失</strong></h4><p>如果因为网络原因，主服务传播给从服务的命令丢失了。那么当从服务向主服务器放松RELPCONF ACK 命令时，主服务会发觉 从服务 的复制偏移量少于主服务的复制偏移量；</p><p>然后主服务会将丢失的部分发送给从服务器(这里是没有断线的部分重同步,与断线之后的PSYNC区分)</p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211119111122087.png" alt="image-20211119111122087"></p><p><img src="/2022/01/27/redis-ke-hu-duan/image-20211119111136634.png" alt="image-20211119111136634"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis事件</title>
      <link href="/2022/01/27/redis-shi-jian/"/>
      <url>/2022/01/27/redis-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="redis事件"><a href="#redis事件" class="headerlink" title="redis事件"></a>redis事件</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//事件处理器状态(同时是时间处理器和文件处理器)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">aeEventLoop</span> <span class="token punctuation">{</span>    <span class="token comment">//当前注册的最大描述符</span>    <span class="token keyword">int</span> maxfd<span class="token punctuation">;</span>   <span class="token comment">/* highest file descriptor currently registered */</span>    <span class="token comment">//当前追踪的最大描述符</span>    <span class="token keyword">int</span> setsize<span class="token punctuation">;</span> <span class="token comment">/* max number of file descriptors tracked */</span>    <span class="token comment">//时间事件的id,时间事件链表中记录了最大的id</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> timeEventNextId<span class="token punctuation">;</span>    <span class="token comment">//已注册的文件事件</span>    aeFileEvent <span class="token operator">*</span>events<span class="token punctuation">;</span> <span class="token comment">/* Registered events */</span>    <span class="token comment">//已经就绪,执行过处理器的文件事件</span>    aeFiredEvent <span class="token operator">*</span>fired<span class="token punctuation">;</span> <span class="token comment">/* Fired events */</span>    <span class="token comment">//时间事件</span>    aeTimeEvent <span class="token operator">*</span>timeEventHead<span class="token punctuation">;</span>    <span class="token comment">//事件处理器开关</span>    <span class="token keyword">int</span> stop<span class="token punctuation">;</span>    <span class="token comment">//多路复用库的私有数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>apidata<span class="token punctuation">;</span> <span class="token comment">/* This is used for polling API specific data */</span>    <span class="token comment">//处理事件之前要执行的函数</span>    aeBeforeSleepProc <span class="token operator">*</span>beforesleep<span class="token punctuation">;</span>    <span class="token comment">//处理事件之后要执行的函数</span>    aeBeforeSleepProc <span class="token operator">*</span>aftersleep<span class="token punctuation">;</span>    <span class="token keyword">int</span> flags<span class="token punctuation">;</span><span class="token punctuation">}</span> aeEventLoop<span class="token punctuation">;</span></code></pre><h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><p>服务器通过套接字和客户端连接,文件事件是对于套接字操作的抽象,通信过程会产生相应文件事件,服务器监听处理这些事件</p><ul><li><strong>本身单线程运行,但是I/O多路复用监听多个套接字</strong></li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* File event structure * * 文件事件结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">aeFileEvent</span> <span class="token punctuation">{</span>    <span class="token comment">// 监听事件类型掩码，</span>    <span class="token comment">// 值可以是 AE_READABLE 或 AE_WRITABLE ，</span>    <span class="token comment">// 或者 AE_READABLE | AE_WRITABLE</span>    <span class="token keyword">int</span> mask<span class="token punctuation">;</span> <span class="token comment">/* one of AE_(READABLE|WRITABLE) */</span>    <span class="token comment">// 读事件处理器</span>    aeFileProc <span class="token operator">*</span>rfileProc<span class="token punctuation">;</span>    <span class="token comment">// 写事件处理器</span>    aeFileProc <span class="token operator">*</span>wfileProc<span class="token punctuation">;</span>    <span class="token comment">// 多路复用库的私有数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>clientData<span class="token punctuation">;</span><span class="token punctuation">}</span> aeFileEvent<span class="token punctuation">;</span></code></pre><h4 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h4><ul><li><p>套接字</p><ul><li>每当一个套接字准备好执行某项操作时,产生一个文件事件,一个服务器连接了多个套接字,可以产生多个文件事件</li><li>当套接字可读(客户端执行write或者close之后)或者有新的可应答套接字出现(新的connect建立)时,产生AE_READABLE事件;套接字变得可写(客户端执行read操作之后)时,产生AE_WRITABLE事件</li></ul></li><li><p>I/O多路复用程序</p><ul><li>负责监听多个套接字的上述两种事件,向文件事件分派器传送产生了事件的套接字</li><li>多个事件时先处理AE_READABLE事件,先读后写,多个套接字都有事件时按照一个队列传送,当上一个套接字的事件处理完毕之后再处理下一个套接字</li></ul></li><li><p>文件事件分派器</p><ul><li>根据传来的套接字调用相应的事件处理器</li></ul></li><li><p>事件处理器</p><ul><li>执行相关操作的函数</li></ul></li></ul><h4 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h4><ul><li><p>函数aeCreateFileEvent</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 根据 mask 参数的值，监听 fd 文件的状态， * 当 fd 可用时，执行 proc 函数 * 将给定套接字的给定事件加入到I/O多路复用程序的监听范围 * 将事件和事件处理器关联 */</span><span class="token keyword">int</span> <span class="token function">aeCreateFileEvent</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span>        aeFileProc <span class="token operator">*</span>proc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>clientData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> eventLoop<span class="token operator">-&gt;</span>setsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        errno <span class="token operator">=</span> ERANGE<span class="token punctuation">;</span>        <span class="token keyword">return</span> AE_ERR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 取出文件事件结构</span>    aeFileEvent <span class="token operator">*</span>fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">aeApiAddEvent</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> AE_ERR<span class="token punctuation">;</span>    <span class="token comment">// 设置文件事件类型，以及事件的处理器</span>    fe<span class="token operator">-&gt;</span>mask <span class="token operator">|=</span> mask<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> AE_READABLE<span class="token punctuation">)</span> fe<span class="token operator">-&gt;</span>rfileProc <span class="token operator">=</span> proc<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> AE_WRITABLE<span class="token punctuation">)</span> fe<span class="token operator">-&gt;</span>wfileProc <span class="token operator">=</span> proc<span class="token punctuation">;</span>    <span class="token comment">// 私有数据</span>    fe<span class="token operator">-&gt;</span>clientData <span class="token operator">=</span> clientData<span class="token punctuation">;</span>    <span class="token comment">// 如果有需要，更新事件处理器的最大 fd</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;</span> eventLoop<span class="token operator">-&gt;</span>maxfd<span class="token punctuation">)</span>        eventLoop<span class="token operator">-&gt;</span>maxfd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">return</span> AE_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeDeleteFileEvent</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 将 fd 从 mask 指定的监听队列中删除 * i/o多路复用程序取消对给定套接字的给定事件的监听 * 取消事件和事件处理器之间的关联 */</span><span class="token keyword">void</span> <span class="token function">aeDeleteFileEvent</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> eventLoop<span class="token operator">-&gt;</span>setsize<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 取出文件事件结构</span>    aeFileEvent <span class="token operator">*</span>fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 未设置监听的事件类型，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">==</span> AE_NONE<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* We want to always remove AE_BARRIER if set when AE_WRITABLE     * is removed. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> AE_WRITABLE<span class="token punctuation">)</span> mask <span class="token operator">|=</span> AE_BARRIER<span class="token punctuation">;</span>    <span class="token comment">// 取消对给定 fd 的给定事件的监视</span>    <span class="token function">aeApiDelEvent</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算新掩码</span>    fe<span class="token operator">-&gt;</span>mask <span class="token operator">=</span> fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> eventLoop<span class="token operator">-&gt;</span>maxfd <span class="token operator">&amp;&amp;</span> fe<span class="token operator">-&gt;</span>mask <span class="token operator">==</span> AE_NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Update the max fd */</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>maxfd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>mask <span class="token operator">!=</span> AE_NONE<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        eventLoop<span class="token operator">-&gt;</span>maxfd <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeGetFileEvents</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 获取给定 fd 正在监听的事件类型 * 返回正在监视的事件类型 */</span><span class="token keyword">int</span> <span class="token function">aeGetFileEvents</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> eventLoop<span class="token operator">-&gt;</span>setsize<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    aeFileEvent <span class="token operator">*</span>fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fe<span class="token operator">-&gt;</span>mask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeWait</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* Wait for milliseconds until the given file descriptor becomes * writable/readable/exception * 在给定毫秒内等待，直到 fd 变成可写、可读或异常 * 事件成功产生或者超时就返回 */</span><span class="token keyword">int</span> <span class="token function">aeWait</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> milliseconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> retmask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> retval<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pfd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> AE_READABLE<span class="token punctuation">)</span> pfd<span class="token punctuation">.</span>events <span class="token operator">|=</span> POLLIN<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> AE_WRITABLE<span class="token punctuation">)</span> pfd<span class="token punctuation">.</span>events <span class="token operator">|=</span> POLLOUT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>retval <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> retmask <span class="token operator">|=</span> AE_READABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLOUT<span class="token punctuation">)</span> retmask <span class="token operator">|=</span> AE_WRITABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR<span class="token punctuation">)</span> retmask <span class="token operator">|=</span> AE_WRITABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span> retmask <span class="token operator">|=</span> AE_WRITABLE<span class="token punctuation">;</span>        <span class="token keyword">return</span> retmask<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeApiPoll</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*在指定时间内阻塞并等待所有被aeCreateFileEvent函数设置为监听状态的套接字产生文件事件当有至少一个事件产生或者超时返回*/</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">aeApiPoll</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>tvp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    aeApiState <span class="token operator">*</span>state <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>apidata<span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">,</span> j<span class="token punctuation">,</span> numevents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_rfds<span class="token punctuation">,</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>rfds<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>fd_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_wfds<span class="token punctuation">,</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>wfds<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>fd_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据select的retval决定之后的操作</span>    retval <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>maxfd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_rfds<span class="token punctuation">,</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_wfds<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>tvp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> eventLoop<span class="token operator">-&gt;</span>maxfd<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            aeFileEvent <span class="token operator">*</span>fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//监听得到的事件类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">==</span> AE_NONE<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> AE_READABLE <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_rfds<span class="token punctuation">)</span><span class="token punctuation">)</span>                mask <span class="token operator">|=</span> AE_READABLE<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> AE_WRITABLE <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>state<span class="token operator">-&gt;</span>_wfds<span class="token punctuation">)</span><span class="token punctuation">)</span>                mask <span class="token operator">|=</span> AE_WRITABLE<span class="token punctuation">;</span>            eventLoop<span class="token operator">-&gt;</span>fired<span class="token punctuation">[</span>numevents<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> j<span class="token punctuation">;</span>            eventLoop<span class="token operator">-&gt;</span>fired<span class="token punctuation">[</span>numevents<span class="token punctuation">]</span><span class="token punctuation">.</span>mask <span class="token operator">=</span> mask<span class="token punctuation">;</span>            numevents<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"aeApiPoll: select, %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> numevents<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeProcessEvents</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* 调用aeApiPoll等待事件产生,之后遍历所有产生的事件,处理所有已到达的时间事件，以及所有已就绪的文件事件 * 如果不传入特殊 flags 的话，那么函数睡眠直到文件事件就绪， * 或者下个时间事件到达（如果有的话） * 根据flag值确定相应的处理步骤 * 函数的返回值为已处理事件的数量*/</span><span class="token keyword">int</span> <span class="token function">aeProcessEvents</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numevents<span class="token punctuation">;</span>    <span class="token comment">/* Nothing to do? return ASAP */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_TIME_EVENTS<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_FILE_EVENTS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* Note that we want to call select() even if there are no     * file events to process as long as we want to process time     * events, in order to sleep until the next time event is ready     * to fire. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>maxfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_TIME_EVENTS<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_DONT_WAIT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">,</span> <span class="token operator">*</span>tvp<span class="token punctuation">;</span>        <span class="token class-name">int64_t</span> usUntilTimer <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 距今最近的时间事件还要多久才能达到,使用usUntilTimer保存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_TIME_EVENTS <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_DONT_WAIT<span class="token punctuation">)</span><span class="token punctuation">)</span>            usUntilTimer <span class="token operator">=</span> <span class="token function">usUntilEarliestTimer</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//还没有到达</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>usUntilTimer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> usUntilTimer <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">;</span>            tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> usUntilTimer <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">;</span>            tvp <span class="token operator">=</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//如果时间事件已经到达(到达间隔时间为负数),将已到达时间事件的到达时间间隔设置为0</span>            <span class="token comment">/* If we have to check for events but need to return             * ASAP because of AE_DONT_WAIT we need to set the timeout             * to zero */</span>            <span class="token comment">// 执行到这一步，说明没有时间事件即将到达</span>            <span class="token comment">// 那么根据 AE_DONT_WAIT 是否设置来决定是否阻塞，以及阻塞的时间长度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_DONT_WAIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置文件事件不阻塞,将已到达时间事件的到达时间间隔设置为0</span>                tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                tvp <span class="token operator">=</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">/* Otherwise we can block */</span>                <span class="token comment">// 文件事件可以阻塞直到有事件到达为止,wait时间设置为无穷</span>                tvp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* wait forever */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> AE_DONT_WAIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            tvp <span class="token operator">=</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>beforesleep <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> flags <span class="token operator">&amp;</span> AE_CALL_BEFORE_SLEEP<span class="token punctuation">)</span>            eventLoop<span class="token operator">-&gt;</span><span class="token function">beforesleep</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Call the multiplexing API, will return only on timeout or when         * some event fires. */</span>        <span class="token comment">// 处理文件事件，阻塞时间由 tvp 决定</span>        numevents <span class="token operator">=</span> <span class="token function">aeApiPoll</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> tvp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* After sleep callback. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token operator">-&gt;</span>aftersleep <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> flags <span class="token operator">&amp;</span> AE_CALL_AFTER_SLEEP<span class="token punctuation">)</span>            eventLoop<span class="token operator">-&gt;</span><span class="token function">aftersleep</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numevents<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//从已就绪数组中获取事件</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>fired<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            aeFileEvent <span class="token operator">*</span>fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mask <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>fired<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>mask<span class="token punctuation">;</span>            <span class="token keyword">int</span> fired <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* Number of events fired for current fd. */</span>            <span class="token keyword">int</span> invert <span class="token operator">=</span> fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> AE_BARRIER<span class="token punctuation">;</span>            <span class="token comment">//读取事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>invert <span class="token operator">&amp;&amp;</span> fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> mask <span class="token operator">&amp;</span> AE_READABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//确保读/写事件只能执行其中一个</span>                fe<span class="token operator">-&gt;</span><span class="token function">rfileProc</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span>fd<span class="token punctuation">,</span>fe<span class="token operator">-&gt;</span>clientData<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>                fired<span class="token operator">++</span><span class="token punctuation">;</span>                fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Refresh in case of resize. */</span>            <span class="token punctuation">}</span>            <span class="token comment">/* Fire the writable event. */</span>            <span class="token comment">//写事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> mask <span class="token operator">&amp;</span> AE_WRITABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fired <span class="token operator">||</span> fe<span class="token operator">-&gt;</span>wfileProc <span class="token operator">!=</span> fe<span class="token operator">-&gt;</span>rfileProc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fe<span class="token operator">-&gt;</span><span class="token function">wfileProc</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span>fd<span class="token punctuation">,</span>fe<span class="token operator">-&gt;</span>clientData<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>                    fired<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">/* If we have to invert the call, fire the readable event now             * after the writable one. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>invert<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fe <span class="token operator">=</span> <span class="token operator">&amp;</span>eventLoop<span class="token operator">-&gt;</span>events<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Refresh in case of resize. */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fe<span class="token operator">-&gt;</span>mask <span class="token operator">&amp;</span> mask <span class="token operator">&amp;</span> AE_READABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token operator">!</span>fired <span class="token operator">||</span> fe<span class="token operator">-&gt;</span>wfileProc <span class="token operator">!=</span> fe<span class="token operator">-&gt;</span>rfileProc<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    fe<span class="token operator">-&gt;</span><span class="token function">rfileProc</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span>fd<span class="token punctuation">,</span>fe<span class="token operator">-&gt;</span>clientData<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>                    fired<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            processed<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* Check time events */</span>    <span class="token comment">//执行时间事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AE_TIME_EVENTS<span class="token punctuation">)</span>        processed <span class="token operator">+=</span> <span class="token function">processTimeEvents</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> processed<span class="token punctuation">;</span> <span class="token comment">/* return the number of processed file/time events */</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="文件事件处理器"><a href="#文件事件处理器" class="headerlink" title="文件事件处理器"></a>文件事件处理器</h4><p>实现不同的网络通信需求,主要是连接应答处理器,命令请求处理器,命令回复处理器</p><ul><li><p>连接应答处理器</p><ul><li><p>函数acceptTcpHandler对连接服务器监听套接字的客户端进行应答</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//创建一个TCP连接</span><span class="token keyword">void</span> <span class="token function">acceptTcpHandler</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cport<span class="token punctuation">,</span> cfd<span class="token punctuation">,</span> max <span class="token operator">=</span> MAX_ACCEPTS_PER_CALL<span class="token punctuation">;</span>    <span class="token keyword">char</span> cip<span class="token punctuation">[</span>NET_IP_STR_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">UNUSED</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UNUSED</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UNUSED</span><span class="token punctuation">(</span>privdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>max<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//accept客户端连接</span>        cfd <span class="token operator">=</span> <span class="token function">anetTcpAccept</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>neterr<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> cip<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TCP连接函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cfd <span class="token operator">==</span> ANET_ERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EWOULDBLOCK<span class="token punctuation">)</span>                <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span>                    <span class="token string">"Accepting client connection: %s"</span><span class="token punctuation">,</span> server<span class="token punctuation">.</span>neterr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_VERBOSE<span class="token punctuation">,</span><span class="token string">"Accepted %s:%d"</span><span class="token punctuation">,</span> cip<span class="token punctuation">,</span> cport<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 为客户端创建客户端状态（redisClient）</span>        <span class="token function">acceptCommonHandler</span><span class="token punctuation">(</span><span class="token function">connCreateAcceptedSocket</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>cip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>redis进行初始化时,将处理器与套接字的AE_READABLE事件连接起来,当由客户端使用sys/socket.h/connect函数连接服务器监听套接字时,套接字产生AE_READABLE事件,引发连接应答处理器执行,并执行相应的套接字应答操作</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR  a<span class="token text string">((客户端))</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">连接监听套接字</span><span class="token arrow operator">--&gt;</span></span>b<span class="token text string">[服务器:服务器监听套接字产生的AE_READABLE事件,执行连接应答处理器]</span></code></pre></li></ul></li><li><p>命令请求处理器</p><ul><li><p>函数readQueryFromClient从套接字中读入客户端发送的命令请求内容</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 读取客户端的查询缓冲区内容 */</span><span class="token keyword">void</span> <span class="token function">readQueryFromClient</span><span class="token punctuation">(</span>connection <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    client <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">connGetPrivateData</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nread<span class="token punctuation">,</span> big_arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> qblen<span class="token punctuation">,</span> readlen<span class="token punctuation">;</span>    <span class="token comment">/* Check if we want to read from the client later when exiting from     * the event loop. This is the case if threaded I/O is enabled. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">postponeClientRead</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* Update total number of reads on server */</span>    <span class="token comment">//更新server的读入处理计数器</span>    <span class="token function">atomicIncr</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>stat_total_reads_processed<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readlen <span class="token operator">=</span> PROTO_IOBUF_LEN<span class="token punctuation">;</span>    <span class="token comment">/* If this is a multi bulk request, and we are processing a bulk reply     * that is large enough, try to maximize the probability that the query     * buffer contains exactly the SDS string representing the object, even     * at the risk of requiring more read(2) calls. This way the function     * processMultiBulkBuffer() can avoid copying buffers to create the     * Redis Object representing the argument. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reqtype <span class="token operator">==</span> PROTO_REQ_MULTIBULK <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>multibulklen <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>bulklen <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>bulklen <span class="token operator">&gt;=</span> PROTO_MBULK_BIG_ARG<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">ssize_t</span> remaining <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>bulklen<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sdslen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        big_arg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">/* Note that the 'remaining' variable may be zero in some edge case,         * for example once we resume a blocked client after CLIENT PAUSE. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> readlen <span class="token operator">=</span> remaining<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取查询缓冲区当前内容的长度</span>    <span class="token comment">// 如果读取出现 short read ，那么可能会有内容滞留在读取缓冲区里面</span>    <span class="token comment">// 这些滞留内容也许不能完整构成一个符合协议的命令</span>    qblen <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为查询缓冲区分配空间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>big_arg <span class="token operator">||</span> <span class="token function">sdsalloc</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span> <span class="token operator">&lt;</span> PROTO_IOBUF_LEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* When reading a BIG_ARG we won't be reading more than that one arg         * into the query buffer, so we don't need to pre-allocate more than we         * need, so using the non-greedy growing. For an initial allocation of         * the query buffer, we also don't wanna use the greedy growth, in order         * to avoid collision with the RESIZE_THRESHOLD mechanism. */</span>        <span class="token comment">//太长的指令参数只读入一个参数,查询缓冲区不需要多余分配空间,不使用贪心分配空间</span>        c<span class="token operator">-&gt;</span>querybuf <span class="token operator">=</span> <span class="token function">sdsMakeRoomForNonGreedy</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">,</span> readlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        c<span class="token operator">-&gt;</span>querybuf <span class="token operator">=</span> <span class="token function">sdsMakeRoomFor</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">,</span> readlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Read as much as possible from the socket to save read(2) system calls. */</span>        readlen <span class="token operator">=</span> <span class="token function">sdsavail</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//读入内容到查询缓存</span>    nread <span class="token operator">=</span> <span class="token function">connRead</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>querybuf<span class="token operator">+</span>qblen<span class="token punctuation">,</span> readlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读入出错时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connGetState</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token operator">==</span> CONN_STATE_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_VERBOSE<span class="token punctuation">,</span> <span class="token string">"Reading from client: %s"</span><span class="token punctuation">,</span><span class="token function">connGetLastError</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">freeClientAsync</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">//遇到EOF</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>verbosity <span class="token operator">&lt;=</span> LL_VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sds info <span class="token operator">=</span> <span class="token function">catClientInfoString</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_VERBOSE<span class="token punctuation">,</span> <span class="token string">"Client closed connection %s"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sdsfree</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">freeClientAsync</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_MASTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Append the query buffer to the pending (not applied) buffer         * of the master. We'll use this buffer later in order to have a         * copy of the string applied by the last command executed. */</span>        <span class="token comment">// 根据内容，更新查询缓冲区（SDS） free 和 len 属性</span>        <span class="token comment">// 并将 '\0' 正确地放到内容的最后</span>        c<span class="token operator">-&gt;</span>pending_querybuf <span class="token operator">=</span> <span class="token function">sdscatlen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>pending_querybuf<span class="token punctuation">,</span>                                        c<span class="token operator">-&gt;</span>querybuf<span class="token operator">+</span>qblen<span class="token punctuation">,</span>nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sdsIncrLen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">,</span>nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    qblen <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果有需要，更新缓冲区内容长度的峰值（peak）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf_peak <span class="token operator">&lt;</span> qblen<span class="token punctuation">)</span> c<span class="token operator">-&gt;</span>querybuf_peak <span class="token operator">=</span> qblen<span class="token punctuation">;</span>    <span class="token comment">// 记录服务器和客户端最后一次互动的时间</span>    c<span class="token operator">-&gt;</span>lastinteraction <span class="token operator">=</span> server<span class="token punctuation">.</span>unixtime<span class="token punctuation">;</span>    <span class="token comment">// 如果客户端是 master 的话，更新它的复制偏移量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_MASTER<span class="token punctuation">)</span> c<span class="token operator">-&gt;</span>read_reploff <span class="token operator">+=</span> nread<span class="token punctuation">;</span>    <span class="token function">atomicIncr</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>stat_net_input_bytes<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询缓冲区长度超出服务器最大缓冲区长度</span>    <span class="token comment">// 清空缓冲区并释放客户端</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_MASTER<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">)</span> <span class="token operator">&gt;</span> server<span class="token punctuation">.</span>client_max_querybuf_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sds ci <span class="token operator">=</span> <span class="token function">catClientInfoString</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> bytes <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes <span class="token operator">=</span> <span class="token function">sdscatrepr</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span>c<span class="token operator">-&gt;</span>querybuf<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_WARNING<span class="token punctuation">,</span><span class="token string">"Closing client that reached max query buffer length: %s (qbuf initial bytes: %s)"</span><span class="token punctuation">,</span> ci<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sdsfree</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sdsfree</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">freeClientAsync</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* There is more data in the client input buffer, continue parsing it     * in case to check if there is a full command to execute. */</span>    <span class="token comment">// 从查询缓存重读取内容，创建参数，并执行命令</span>    <span class="token comment">// 函数会执行到缓存中的所有内容都被处理完为止</span>     <span class="token function">processInputBuffer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当一个客户端通过连接应答处理器连接到服务器之后,客户端套接字的AE_READABLE事件和命令请求处理器相关联,当客户端向服务器发送命令请求时,产生AE_READABLE事件引发处理器执行,执行相关套接字读入工作</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR  a<span class="token text string">((客户端))</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">发送命令请求</span><span class="token arrow operator">--&gt;</span></span>b<span class="token text string">[服务器:客户端套接字产生AE_READABLE事件,执行命令请求处理器]</span></code></pre></li></ul></li><li><p>命令回复处理器</p><ul><li><p>函数sendReplyToClient将服务器执行相关命令得到的命令回复通过套接字返回给客户端</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 负责传送命令回复的写处理器 */</span> <span class="token keyword">void</span> <span class="token function">sendReplyToClient</span><span class="token punctuation">(</span>connection <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    client <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">connGetPrivateData</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">writeToClient</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//具体实现</span><span class="token punctuation">}</span></code></pre><p>具体实现的函数如下:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">writeToClient</span><span class="token punctuation">(</span>client <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> handler_installed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* Update total number of writes on server */</span>    <span class="token comment">//更新写回复计数器</span>    <span class="token function">atomicIncr</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>stat_total_writes_processed<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> nwritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> totwritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> objlen<span class="token punctuation">;</span>    clientReplyBlock <span class="token operator">*</span>o<span class="token punctuation">;</span>    <span class="token comment">//一直循环直到回复缓冲区为空</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">clientHasPendingReplies</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>bufpos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 写入内容到套接字</span>            <span class="token comment">// c-&gt;sentlen 是用来处理 short write 的</span>            <span class="token comment">// 当出现 short write ，导致写入未能一次完成时,</span>            <span class="token comment">// c-&gt;buf+c-&gt;sentlen 就会偏移到正确（未写入）内容的位置上。</span>            nwritten <span class="token operator">=</span> <span class="token function">connWrite</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">,</span>c<span class="token operator">-&gt;</span>buf<span class="token operator">+</span>c<span class="token operator">-&gt;</span>sentlen<span class="token punctuation">,</span>c<span class="token operator">-&gt;</span>bufpos<span class="token operator">-</span>c<span class="token operator">-&gt;</span>sentlen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//出错时跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//写入之后更新写入计数器变量</span>            c<span class="token operator">-&gt;</span>sentlen <span class="token operator">+=</span> nwritten<span class="token punctuation">;</span>            totwritten <span class="token operator">+=</span> nwritten<span class="token punctuation">;</span>            <span class="token comment">/* If the buffer was sent, set bufpos to zero to continue with             * the remainder of the reply. */</span>            <span class="token comment">// 如果缓冲区中的内容已经全部写入完毕</span>            <span class="token comment">// 那么清空客户端的两个计数器变量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token operator">-&gt;</span>sentlen <span class="token operator">==</span> c<span class="token operator">-&gt;</span>bufpos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token operator">-&gt;</span>bufpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                c<span class="token operator">-&gt;</span>sentlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//取出位于链表最前面的对象</span>            o <span class="token operator">=</span> <span class="token function">listNodeValue</span><span class="token punctuation">(</span><span class="token function">listFirst</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            objlen <span class="token operator">=</span> o<span class="token operator">-&gt;</span>used<span class="token punctuation">;</span>            <span class="token comment">//空对象不做处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>objlen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token operator">-&gt;</span>reply_bytes <span class="token operator">-=</span> o<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>                <span class="token function">listDelNode</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">,</span><span class="token function">listFirst</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 写入内容到套接字</span>            <span class="token comment">// c-&gt;sentlen 是用来处理 short write 的</span>            <span class="token comment">// 当出现 short write ，导致写入未能一次完成时，</span>            <span class="token comment">// c-&gt;buf+c-&gt;sentlen 就会偏移到正确（未写入）内容的位置上</span>            nwritten <span class="token operator">=</span> <span class="token function">connWrite</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">,</span> o<span class="token operator">-&gt;</span>buf <span class="token operator">+</span> c<span class="token operator">-&gt;</span>sentlen<span class="token punctuation">,</span> objlen <span class="token operator">-</span> c<span class="token operator">-&gt;</span>sentlen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//写入出错时跳出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//成功写入时更新计数器变量</span>            c<span class="token operator">-&gt;</span>sentlen <span class="token operator">+=</span> nwritten<span class="token punctuation">;</span>            totwritten <span class="token operator">+=</span> nwritten<span class="token punctuation">;</span>            <span class="token comment">/* If we fully sent the object on head go to the next one */</span>            <span class="token comment">// 如果缓冲区内容全部写入完毕，那么删除已写入完毕的节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>sentlen <span class="token operator">==</span> objlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token operator">-&gt;</span>reply_bytes <span class="token operator">-=</span> o<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>                <span class="token function">listDelNode</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">,</span><span class="token function">listFirst</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token operator">-&gt;</span>sentlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">/* If there are no longer objects in the list, we expect                 * the count of reply bytes to be exactly zero. */</span>                <span class="token comment">//list之中没有对象,reply的字节数设置为0</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listLength</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token function">serverAssert</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>reply_bytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 为了避免一个非常大的回复独占服务器，         * 当写入的总数量大于 REDIS_MAX_WRITE_PER_EVENT ，         * 临时中断写入，将处理时间让给其他客户端，         * 剩余的内容等下次写入就绪再继续写入         * 不过，如果服务器的内存占用已经超过了限制，         * 那么为了将回复缓冲区中的内容尽快写入给客户端，         * 然后释放回复缓冲区的空间来回收内存，         * 这时即使写入量超过了 REDIS_MAX_WRITE_PER_EVENT ，         * 程序也继续进行写入*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totwritten <span class="token operator">&gt;</span> NET_MAX_WRITES_PER_EVENT <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>server<span class="token punctuation">.</span>maxmemory <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>             <span class="token function">zmalloc_used_memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> server<span class="token punctuation">.</span>maxmemory<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_SLAVE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">atomicIncr</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>stat_net_output_bytes<span class="token punctuation">,</span> totwritten<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入出错检测</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connGetState</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">)</span> <span class="token operator">!=</span> CONN_STATE_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">serverLog</span><span class="token punctuation">(</span>LL_VERBOSE<span class="token punctuation">,</span>                <span class="token string">"Error writing to client: %s"</span><span class="token punctuation">,</span> <span class="token function">connGetLastError</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">freeClientAsync</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>totwritten <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* For clients representing masters we don't count sending data         * as an interaction, since we always send REPLCONF ACK commands         * that take some time to just fill the socket output buffer.         * We just rely on data / pings received for timeout detection. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_MASTER<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">-&gt;</span>lastinteraction <span class="token operator">=</span> server<span class="token punctuation">.</span>unixtime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">clientHasPendingReplies</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token operator">-&gt;</span>sentlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/* Note that writeToClient() is called in a threaded way, but         * adDeleteFileEvent() is not thread safe: however writeToClient()         * is always called with handler_installed set to 0 from threads         * so we are fine. */</span><span class="token comment">//前面应该是aeDeleteFileEvent()</span>        <span class="token comment">//不能直接删除write handler,因为本身调用就是在线程之中了,aeDeleteFileEvent()线程不安全</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler_installed<span class="token punctuation">)</span> <span class="token function">connSetWriteHandler</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>conn<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Close connection after entire reply has been sent. */</span>        <span class="token comment">// 如果指定了写入之后关闭客户端 FLAG ，那么关闭客户端</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLIENT_CLOSE_AFTER_REPLY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">freeClientAsync</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当访问有命令回复需要传送给客户端的时候将客户端套接字的AE_WRITABLE事件和命令回复处理器相关联,当客户端准备好接受服务器传回的命令回复时,产生AE_WRITABLE事件引发处理器执行,执行相关套接字写入工作</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> RL  a<span class="token text string">[服务器:客户端套接字产生AE_WRITABLE事件,执行命令回复处理器]</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">发送命令回复</span><span class="token arrow operator">--&gt;</span></span>b<span class="token text string">((客户端))</span></code></pre><p>回复发送之后就接触命令回复处理器和客户端套接字AE_WRITABLE事件之间的关联</p></li></ul></li><li><p>全过程:</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRa<span class="token text string">[客户端]</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">客户端向服务器发送连接请求,服务器执行连接应答处理器</span><span class="token arrow operator">--&gt;</span></span>b<span class="token text string">[服务器]</span>a<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">客户端向服务器发送命令请求,服务器执行命令请求处理器</span><span class="token arrow operator">--&gt;</span></span>bb<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">服务器向客户端发送命令回复,服务器执行命令回复处理器</span><span class="token arrow operator">--&gt;</span></span>a</code></pre></li></ul><h3 id="时间事件"><a href="#时间事件" class="headerlink" title="时间事件"></a>时间事件</h3><p>(如serverCron函数)在给定时间点执行,时间事件就是对定时操作的抽象</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>定时事件</li><li>周期性事件</li></ul><h4 id="时间事件的结构"><a href="#时间事件的结构" class="headerlink" title="时间事件的结构"></a>时间事件的结构</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//时间事件的结构,种类包括定时事件和周期性事件</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">aeTimeEvent</span> <span class="token punctuation">{</span>    <span class="token comment">//事件的唯一标识符,从小到大表示从旧到新</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span> <span class="token comment">/* time event identifier. */</span>    <span class="token comment">//事件的到达时间</span>    monotime when<span class="token punctuation">;</span>    <span class="token comment">//时间事件处理器,一个函数</span>    <span class="token comment">//时间事件的种类决定于这个函数的返回值</span>    <span class="token comment">//AE_NOMORE表示定时事件,到达一次之后被删除并且不会再次到达</span>    <span class="token comment">//返回其他整数n表示周期性事件,服务器对事件的when属性进行更新,使之n毫秒之后再次到达</span>    aeTimeProc <span class="token operator">*</span>timeProc<span class="token punctuation">;</span>    <span class="token comment">//事件释放函数</span>    aeEventFinalizerProc <span class="token operator">*</span>finalizerProc<span class="token punctuation">;</span>    <span class="token comment">//多路复用库的私有数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>clientData<span class="token punctuation">;</span>    <span class="token comment">//指向上一个和下一个时间事件结构,形成链表</span>    <span class="token keyword">struct</span> <span class="token class-name">aeTimeEvent</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">aeTimeEvent</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token comment">//防止在迭代过程中周期性事件被释放</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span> <span class="token comment">/* refcount to prevent timer events from being     * freed in recursive time event calls. */</span><span class="token punctuation">}</span> aeTimeEvent<span class="token punctuation">;</span></code></pre><p>服务器将时间事件都放在一个链表中,每当时间事件处理器执行时遍历链表,对所有已到达的时间事件调用相应的事件处理器.</p><p>新事件放在链表头部,所以链表的头部事件id较大,无序是指when的无序</p><h4 id="相关API-1"><a href="#相关API-1" class="headerlink" title="相关API"></a>相关API</h4><ul><li><p>函数aeCreateTimeEvent将一个新的时间事件加入到服务器,在当前时间的milliseconds毫秒之后到达</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//创建事件计数器</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">aeCreateTimeEvent</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> milliseconds<span class="token punctuation">,</span>        aeTimeProc <span class="token operator">*</span>proc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>clientData<span class="token punctuation">,</span>        aeEventFinalizerProc <span class="token operator">*</span>finalizerProc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//更新时间计数器</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> id <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventNextId<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//创建时间事件结构</span>    aeTimeEvent <span class="token operator">*</span>te<span class="token punctuation">;</span>    te <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>te<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>te <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> AE_ERR<span class="token punctuation">;</span>    <span class="token comment">//设置id</span>    te<span class="token operator">-&gt;</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token comment">//设置事件</span>    te<span class="token operator">-&gt;</span>when <span class="token operator">=</span> <span class="token function">getMonotonicUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> milliseconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment">//设置事件处理器</span>    te<span class="token operator">-&gt;</span>timeProc <span class="token operator">=</span> proc<span class="token punctuation">;</span>    te<span class="token operator">-&gt;</span>finalizerProc <span class="token operator">=</span> finalizerProc<span class="token punctuation">;</span>    <span class="token comment">//私有数据</span>    te<span class="token operator">-&gt;</span>clientData <span class="token operator">=</span> clientData<span class="token punctuation">;</span>    <span class="token comment">//将事件插入链表</span>    te<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    te<span class="token operator">-&gt;</span>next <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventHead<span class="token punctuation">;</span>    te<span class="token operator">-&gt;</span>refcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>        te<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> te<span class="token punctuation">;</span>    eventLoop<span class="token operator">-&gt;</span>timeEventHead <span class="token operator">=</span> te<span class="token punctuation">;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>函数aeDeleteTimeEvent删除给定id的时间事件</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//删除给定的时间事件</span><span class="token keyword">int</span> <span class="token function">aeDeleteTimeEvent</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    aeTimeEvent <span class="token operator">*</span>te <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventHead<span class="token punctuation">;</span>    <span class="token comment">//遍历链表</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//发现目标事件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//修改id之后,在processTimeEvents的时候删除</span>            te<span class="token operator">-&gt;</span>id <span class="token operator">=</span> AE_DELETED_EVENT_ID<span class="token punctuation">;</span>            <span class="token keyword">return</span> AE_OK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        te <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> AE_ERR<span class="token punctuation">;</span> <span class="token comment">/* NO event with the specified ID found  */</span><span class="token punctuation">}</span></code></pre></li><li><p>函数usUntilEarliestTimer返回到达时间距离当前时间最近的时间事件到达耗时</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//返回距离第一个时间事件触发的毫秒数</span><span class="token comment">//需要遍历链表,定时一般来说时间事件不多,遍历时间很短</span><span class="token keyword">static</span> <span class="token class-name">int64_t</span> <span class="token function">usUntilEarliestTimer</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>    aeTimeEvent <span class="token operator">*</span>te <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventHead<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>te <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    aeTimeEvent <span class="token operator">*</span>earliest <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>te<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>earliest <span class="token operator">||</span> te<span class="token operator">-&gt;</span>when <span class="token operator">&lt;</span> earliest<span class="token operator">-&gt;</span>when<span class="token punctuation">)</span>            earliest <span class="token operator">=</span> te<span class="token punctuation">;</span>        te <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    monotime now <span class="token operator">=</span> <span class="token function">getMonotonicUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;=</span> earliest<span class="token operator">-&gt;</span>when<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> earliest<span class="token operator">-&gt;</span>when <span class="token operator">-</span> now<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>函数processTimeEvents</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//处理到达的时间事件</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">processTimeEvents</span><span class="token punctuation">(</span>aeEventLoop <span class="token operator">*</span>eventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    aeTimeEvent <span class="token operator">*</span>te<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> maxId<span class="token punctuation">;</span>    <span class="token comment">//遍历链表执行已到达的事件</span>    te <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventHead<span class="token punctuation">;</span><span class="token comment">//指向链表头部</span>    maxId <span class="token operator">=</span> eventLoop<span class="token operator">-&gt;</span>timeEventNextId<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    monotime now <span class="token operator">=</span> <span class="token function">getMonotonicUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>        <span class="token comment">/* Remove events scheduled for deletion. */</span>        <span class="token comment">//之前id已经设置为AE_DELETED_EVENT_ID的事件需要删除掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>id <span class="token operator">==</span> AE_DELETED_EVENT_ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>            aeTimeEvent <span class="token operator">*</span>next <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">/* If a reference exists for this timer event,             * don't free it. This is currently incremented             * for recursive timerProc calls */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>refcount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//有迭代子程序调用的事件不删除</span>                te <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//修改相关的指针</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>prev<span class="token punctuation">)</span>                te<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                eventLoop<span class="token operator">-&gt;</span>timeEventHead <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>                te<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> te<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>            <span class="token comment">//执行清理处理器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>finalizerProc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                te<span class="token operator">-&gt;</span><span class="token function">finalizerProc</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> te<span class="token operator">-&gt;</span>clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>                now <span class="token operator">=</span> <span class="token function">getMonotonicUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//释放要删除的时间事件</span>            <span class="token function">zfree</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span>            te <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* Make sure we don't process time events created by time events in         * this iteration. Note that this check is currently useless: we always         * add new timers on the head, however if we change the implementation         * detail, this check may be useful again: we keep it here for future         * defense. */</span>        <span class="token comment">//无效事件跳过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>id <span class="token operator">&gt;</span> maxId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            te <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//当前时间大于等于时间事件的when,事件已到达,执行这个事件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token operator">-&gt;</span>when <span class="token operator">&lt;=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> retval<span class="token punctuation">;</span>            id <span class="token operator">=</span> te<span class="token operator">-&gt;</span>id<span class="token punctuation">;</span>            te<span class="token operator">-&gt;</span>refcount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//执行对应的文件处理器,记录返回值</span>            retval <span class="token operator">=</span> te<span class="token operator">-&gt;</span><span class="token function">timeProc</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> id<span class="token punctuation">,</span> te<span class="token operator">-&gt;</span>clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>            te<span class="token operator">-&gt;</span>refcount<span class="token operator">--</span><span class="token punctuation">;</span>            processed<span class="token operator">++</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> <span class="token function">getMonotonicUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//区分是否是定时事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> AE_NOMORE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//retval毫秒之后再次执行</span>                te<span class="token operator">-&gt;</span>when <span class="token operator">=</span> now <span class="token operator">+</span> retval <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//直接删除</span>                te<span class="token operator">-&gt;</span>id <span class="token operator">=</span> AE_DELETED_EVENT_ID<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        te <span class="token operator">=</span> te<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> processed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>serverCron就是非常典型的周期性时间事件,服务器只要在运行就要周期性运行这个函数</p></li></ul><h2 id="redis运行流程"><a href="#redis运行流程" class="headerlink" title="redis运行流程"></a>redis运行流程</h2><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRid1<span class="token text string">[启动服务器]</span><span class="token arrow operator">--&gt;</span>id7<span class="token text string">[配置和加载初始化]</span><span class="token arrow operator">--&gt;</span>id8<span class="token text string">[创建事件循环]</span><span class="token arrow operator">--&gt;</span>id10<span class="token text string">[开始socket监听]</span><span class="token arrow operator">--&gt;</span>id9<span class="token text string">[向循环事件中注册serverCron]</span><span class="token keyword">subgraph</span> 循环id9<span class="token arrow operator">--&gt;</span>id2<span class="token text string">{是否关闭服务器}</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">否</span><span class="token arrow operator">--&gt;</span></span>id4<span class="token text string">[等待文件事件产生]</span>id4<span class="token arrow operator">--&gt;</span>id5<span class="token text string">[处理产生的文件事件]</span><span class="token arrow operator">--&gt;</span>id6<span class="token text string">[处理已到达的时间事件]</span><span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">开始新的事件循环</span><span class="token arrow operator">--&gt;</span></span>id2<span class="token keyword">end</span>id2<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">是</span><span class="token arrow operator">--&gt;</span></span>id3<span class="token text string">[关闭服务器]</span></code></pre><p><img src="/2022/01/27/redis-shi-jian/main_start_event_loop-3251881.png" alt="main_start_event_loop"></p><p>两张图的方式都差不多,展示了整个redis的过程</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis单机数据库以及持久化</title>
      <link href="/2022/01/27/redis-dan-ji-shu-ju-ku/"/>
      <url>/2022/01/27/redis-dan-ji-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="单机数据库实现和持久化"><a href="#单机数据库实现和持久化" class="headerlink" title="单机数据库实现和持久化"></a>单机数据库实现和持久化</h1><h2 id="数据库细节实现"><a href="#数据库细节实现" class="headerlink" title="数据库细节实现"></a>数据库细节实现</h2><ul><li><p>数据库的数据结构</p><ul><li>源代码：<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据库键空间，保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>                 <span class="token comment">/* The keyspace for this DB */</span>    <span class="token comment">// 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳</span>    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span>              <span class="token comment">/* Timeout of keys with a timeout set */</span>    <span class="token comment">// 正处于阻塞状态的键</span>    dict <span class="token operator">*</span>blocking_keys<span class="token punctuation">;</span>        <span class="token comment">/* Keys with clients waiting for data (BLPOP)*/</span>    <span class="token comment">// 可以解除阻塞的键</span>    dict <span class="token operator">*</span>ready_keys<span class="token punctuation">;</span>           <span class="token comment">/* Blocked keys that received a PUSH */</span>    <span class="token comment">// 正在被 WATCH 命令监视的键</span>    dict <span class="token operator">*</span>watched_keys<span class="token punctuation">;</span>         <span class="token comment">/* WATCHED keys for MULTI/EXEC CAS */</span>    <span class="token comment">//数据库编码</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>                     <span class="token comment">/* Database ID */</span>    <span class="token comment">// 数据库的键的平均 TTL ，统计信息</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> avg_ttl<span class="token punctuation">;</span>          <span class="token comment">/* Average TTL, just for stats */</span>    <span class="token comment">//过期指针</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> expires_cursor<span class="token punctuation">;</span> <span class="token comment">/* Cursor of the active expire cycle. */</span>    <span class="token comment">//即将整理的键名称,用一个list保存</span>    list <span class="token operator">*</span>defrag_later<span class="token punctuation">;</span>         <span class="token comment">/* List of key names to attempt to defrag one by one, gradually. */</span><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li>Hash table type implementation<ul><li>tryResizeHashTables()用于缩小字典体积：如果字典的使用率比 HASHTABLE_MIN_MINFILL 常量要低，那么通过缩小字典的体积来节约内存,htNeedsResize()就是比较这两个大小的函数,在有孩子进程的时候不会进行resize</li><li>服务器在对数据库执行增删改查命令时会对数据库进行渐进式 rehash ,但如果服务器长期没有执行命令的话，数据库字典的 rehash 就可能一直没办法完成,为了防止出现这种情况，incrementallyRehash()主动 rehash ,执行了rehash之后返回1,否则返回0</li></ul></li></ul><h3 id="过期功能实现"><a href="#过期功能实现" class="headerlink" title="过期功能实现"></a>过期功能实现</h3><ul><li><p>设置生存和过期时间</p><p><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211110165635236.png" alt="image-20211110165635236"></p></li><li><p>带有生存和过期时间的数据库</p><p><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211110165743757.png" alt="image-20211110165743757"></p><p>添加过期时间就是在过期字典中添加项目,移除过期时间就是在过期字典中删除对应的项目,键过期时间和当前时间做差就可以计算出生存时间.</p></li><li><p>过期键删除:</p><ul><li><p>惰性删除</p><ul><li><p>db.c的expireIfNeeded()函数对于所有的输入键检查是否过期,过期的键直接删除</p><p><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211111154024925.png" alt="image-20211111154024925"></p><ul><li>定期删除<ul><li>由expire.c中的activeExpireCycle()函数实现定期删除,当服务器定期执行server.c的serverCron()函数时,就会调用,在expire字典中随机检查一部分键的过期时间,并且删除其中的过期键.</li></ul></li></ul></li><li><p>RDB对于过期键处理</p><ul><li>生成时过期键不加入RDB文件中</li><li>主服务器载入时检查键是否过期,过期键不加入数据库;从服务器不检查,但是会和主服务器同步数据,同步的时候也会清除过期键</li></ul></li><li><p>AOF对于过期键处理</p><ul><li><p>写入时如果键过期但没有删除,不会影响,当(惰性或者定期)删除的时候追加一条DEL</p><ul><li><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211111214557807.png" alt="image-20211111214557807"></li></ul></li><li><p>重写入的时候检查键是否过期,过期键不加入数据库</p></li></ul></li><li><p>复制对于过期键处理</p><ul><li><p>主服务器处理,之后对从服务器发送DEL,从服务器对于过期键不做处理</p></li><li><p><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211111220239415.png" alt="image-20211111220239415"></p><p><img src="/2022/01/27/redis-dan-ji-shu-ju-ku/image-20211111220255616.png" alt="image-20211111220255616"></p></li></ul></li></ul></li></ul><h3 id="数据库通知"><a href="#数据库通知" class="headerlink" title="数据库通知"></a>数据库通知</h3><ul><li><p>可以监视对键的操作情况,或者是监视某个指令的使用情况</p></li><li><p>由notify.c/notifyKeyspaceEvent()函数实现:</p></li></ul></li></ul><pre class="language-c#" data-language="c#"><code class="language-c#">/* The API provided to the rest of the Redis core is a simple function: *实现了发送数据库通知的功能 * notifyKeyspaceEvent(int type, char *event, robj *key, int dbid); * * 'type' is the notification class we define in `server.h`. * type是当前想要发送的通知的类型,根据这个判断通知发送与否,提前在server.h中定义过种类 * 'event' is a C string representing the event name. *  event 参数是一个字符串表示的事件名 * 'key' is a Redis object representing the key name. * key 参数是一个 Redis 对象表示的键名,是产生事件的键 * 'dbid' is the database ID where the key lives. * dbid 参数为键所在(产生事件)的数据库   * 每当一个redis命令需要发送数据库通知的时候,都会调用此函数,向函数传递命令的相关信息*/void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {    sds chan;    robj *chanobj, *eventobj;    int len = -1;    char buf[24];    /* If any modules are interested in events, notify the module system now.     * This bypasses the notifications configuration, but the module engine     * will only call event subscribers if the event type matches the types     * they are interested in. */     moduleNotifyKeyspaceEvent(type, event, key, dbid);    /* If notifications for this class of events are off, return ASAP.     如果给定通知不是服务器允许发送的通知,直接返回*/    if (!(server.notify_keyspace_events &amp; type)) return;    eventobj = createStringObject(event,strlen(event));    /* __keyspace@&lt;db&gt;__:&lt;key&gt; &lt;event&gt; notifications. */    //发送键空间通知    if (server.notify_keyspace_events &amp; NOTIFY_KEYSPACE) {        chan = sdsnewlen("__keyspace@",11);        len = ll2string(buf,sizeof(buf),dbid);        chan = sdscatlen(chan, buf, len);        chan = sdscatlen(chan, "__:", 3);        chan = sdscatsds(chan, key-&gt;ptr);        chanobj = createObject(OBJ_STRING, chan);        pubsubPublishMessage(chanobj, eventobj);//通过publish发送通知        decrRefCount(chanobj);    }    /* __keyevent@&lt;db&gt;__:&lt;event&gt; &lt;key&gt; notifications. */    //发送键时间通知    if (server.notify_keyspace_events &amp; NOTIFY_KEYEVENT) {        chan = sdsnewlen("__keyevent@",11);        //初始化为-1,加入前面发送键空间通知的时候计算过了就不会是-1,少计算一次        if (len == -1) len = ll2string(buf,sizeof(buf),dbid);        chan = sdscatlen(chan, buf, len);        chan = sdscatlen(chan, "__:", 3);        chan = sdscatsds(chan, eventobj-&gt;ptr);        chanobj = createObject(OBJ_STRING, chan);        pubsubPublishMessage(chanobj, key);        decrRefCount(chanobj);    }    decrRefCount(eventobj);}</code></pre><p>​    </p><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>redis是内存数据库,RDB持久化将数据库状态保存到磁盘里面,避免数据意外丢失</p><p>RDB文件时压缩的二进制文件,可以用这个文件恢复数据库状态,主要使用save和bgsave实现</p><h3 id="创建和载入"><a href="#创建和载入" class="headerlink" title="创建和载入"></a>创建和载入</h3><ul><li>save创建RDB文件,但是会阻塞服务器;bgsave生成一个子进程,专门负责生成RDB文件</li><li>只要有RDB文件在,就会自动载入RDB文件(如果开启了AOF持久化功能,会优先使用AOF文件还原数据库)</li><li>bgsave执行期间不能执行save,bgsave(防止竞争条件);也不能执行bgrewriteaof,因为都会有大量的磁盘写入</li></ul><h3 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h3><h4 id="设置自动保存条件"><a href="#设置自动保存条件" class="headerlink" title="设置自动保存条件"></a>设置自动保存条件</h4><p>设定自动保存的条件,达到条件时自动运行bgsave</p><p>条件保存在redisServer的saveparams属性中</p><h4 id="dirty计数器和lastsave属性"><a href="#dirty计数器和lastsave属性" class="headerlink" title="dirty计数器和lastsave属性"></a>dirty计数器和lastsave属性</h4><ul><li>dirty计数器记录上次成功执行save或者bgsave之后服务器对数据库进行修改的次数</li><li>lastsave记录了上次成功save的时间</li></ul><h4 id="检查保存条件"><a href="#检查保存条件" class="headerlink" title="检查保存条件"></a>检查保存条件</h4><p>serverCron函数默认没100ms就要执行一次,维护当前运行的数据库,同时也检查了自动保存条件是否满足,只要有一个条件满足了就要执行bgsave</p><h2 id="AOF持久化-Append-Only-File"><a href="#AOF持久化-Append-Only-File" class="headerlink" title="AOF持久化(Append Only File)"></a>AOF持久化(Append Only File)</h2><p>通过保存所有的写命令记录数据库状态</p><p>写命令执行之后加到redisServer的aof_buf缓冲区末尾,在处理事件循环的时候决定是否将缓冲区的值写入到AOF文件</p><p>数据还原的时候先创建不带网络连接的伪客户端,直接使用来自AOF文件中的命令,挨个执行,最终执行完毕就是数据库的状态</p><h3 id="AOF文件重写"><a href="#AOF文件重写" class="headerlink" title="AOF文件重写"></a>AOF文件重写</h3><ul><li><p>直接读取当前状态,对于每个键直接使用add指令读取最后的状态作为一个add添加进去.</p></li><li><p>开始执行重写之后可能会继续执行指令,对于数据库进行修改,因此建立了AOF重写缓冲区,新指令同时同步到AOF缓冲区和AOF重写缓冲区</p></li><li><p>完成重写之后直接覆盖原来的AOF文件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础</title>
      <link href="/2022/01/27/redis-ji-chu/"/>
      <url>/2022/01/27/redis-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="redis基础"><a href="#redis基础" class="headerlink" title="redis基础"></a>redis基础</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="sds"><a href="#sds" class="headerlink" title="sds"></a>sds</h3><ul><li>字符串长度保存在本体中,获取需要常数时间复杂度</li><li>header包含的部分:<ul><li>len: 表示字符串的真正长度（不包含NULL结束符在内）。</li><li>alloc: 表示字符串的最大容量（不包含最后多余的那个字节）。</li><li>flags: 总是占用一个字节。其中的最低3个bit用来表示header的类型。</li></ul></li><li>缓冲区不会溢出</li><li>减少修改时的内存重分配次数<ul><li>空间预分配</li><li>alloca记录分配的总空间,惰性空间释放</li></ul></li><li>除了自己加上的头部字段,其他和c函数一样,兼容相关函数</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li>双向链表</li><li>无环,头指针的prev,尾指针的next都指向null</li><li>自带指向头指针和尾指针的指针</li><li>链表具有链表长度计数器,标识长度</li><li>void *可以保存不同类型的值</li></ul><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>基于哈希表实现,采用某个哈希函数从key计算得到在哈希表中的位置，采用拉链法解决冲突，并在装载因子超过预定值时自动扩展内存，引发重哈希,并且在重哈希的过程中,每次增删改查推进一步重哈希,避免重哈希期间单个请求的响应时间剧烈增加.</p><p>实现增量式重哈希，dict的数据结构里包含两个哈希表。在重哈希期间，数据从第一个哈希表向第二个哈希表迁移</p><ul><li><p>hash table结构:</p><ul><li>一个dictEntry指针数组（table）。key的哈希值最终映射到这个数组的某个位置上（对应一个bucket）。如果多个key映射到同一个位置，就发生了冲突，那么就拉出一个dictEntry链表。</li><li>size：标识dictEntry指针数组的长度。它总是2的指数。</li><li>sizemask：用于将哈希值映射到table的位置索引。它的值等于(size-1)，比如7, 15, 31, 63，等等，也就是用二进制表示的各个bit全1的数字。每个key先经过hashFunction计算得到一个哈希值，然后计算(哈希值 &amp; sizemask)得到在table上的位置。相当于计算取余(哈希值 % size)。</li><li>used：记录dict中现有的数据个数。它与size的比值就是装载因子（load factor）。这个比值越大，哈希值冲突概率越高。</li></ul></li><li><p>单个dictentry结构:</p><ul><li>```c<br>typedef struct dictEntry {<pre><code>void *key;//键union {    void *val;    uint64_t u64;    int64_t s64;    double d;} v;//值struct dictEntry *next;     /* 具有相同的hash值,先通过链表链接起来Next entry in the same hash bucket. */void *metadata[];           /* An arbitrary number of bytes (starting at a                             * pointer-aligned address) of size as returned                             * by dictType's dictEntryMetadataBytes(). */</code></pre>} dictEntry;<pre class="language-none"><code class="language-none">    - dict本身结构:  ```c  //字典本身  struct dict {      dictType *type;//类型函数      /*dictEntry指针数组（table）。      key的哈希值最终映射到这个数组的某个位置上（对应一个bucket）。      如果多个key映射到同一个位置，就发生了冲突，那么就拉出一个dictEntry链表。      只有在重哈希的过程中，ht_table[0]和ht_table[1]才都有效。      而在平常情况下，只有ht_table[0]有效，ht_table[1]里面没有任何数据。*/      dictEntry **ht_table[2];//hash表      /*记录dict中现有的数据个数。      它与size的比值就是装载因子（load factor）。      这个比值越大，哈希值冲突概率越高。*/      unsigned long ht_used[2];      // rehash 索引      // 当 rehash 不在进行时，值为 -1,它的值记录了当前重哈希进行到哪一步了      long rehashidx; /* rehashing not in progress if rehashidx == -1 */        /* Keep small vars at end for optimal (minimal) struct padding */      /* If &gt;0 rehashing is paused (&lt;0 indicates coding error) */      int16_t pauserehash; //大于0表示rehash计算停止,小于0编码错误      signed char ht_size_exp[2]; /* 记录大小的次方,exponent of size. (size = 1&lt;&lt;exp) */  };</code></pre></li></ul></li><li><p>rehash过程:</p><ul><li>大小选择:<ul><li>扩展时第二个hash表的大小是大于等于第一个的used*2的第一个$2^n$</li><li>收缩时第二个hash表的大小是大于等于第一个的used的第一个$2^n$</li></ul></li><li>rehash的时候重新计算键的哈希值和索引值</li><li>所有键值对rehash结束之后就直接把新的hash表当作原来的hash表</li><li>rehash进行时,每次增删改查都会顺带把第一个哈希表上面相应rehashidx索引上面的所有键值对rehash到第二个表上,rehash完成之后将rehashidx值增加一</li><li>当rehash完成之后,rehashidx的值设置成-1</li></ul></li></ul><h3 id="skiplist"><a href="#skiplist" class="headerlink" title="skiplist"></a>skiplist</h3><ul><li><p>基本结构:</p><ul><li>```c<br>typedef struct zskiplistNode {<pre><code>//zadd命令在将数据插入到skiplist里面之前先进行了解码，所以存储的一定是一个sds//为了方便在查找的时候对数据进行字典序的比较，//而且，skiplist里的value部分是数字的可能性也比较小,不是很方便压缩sds ele;double score;//指向链表前一个节点的指针（前向指针）//每个节点只有1个前向指针(没有依靠level分开)，所以只有第1层链表是一个双向链表struct zskiplistNode *backward;//存放指向各层链表后一个节点的指针（后向指针）//是一个柔性数组,占用内存不在zskiplistNode结构里面，需要插入节点的时候单独为它分配//所以skiplist的每个节点所包含的指针数目是不固定的struct zskiplistLevel {    //每层对应1个后向指针，用forward字段表示    struct zskiplistNode *forward;    //表示当前的指针跨越了多少个节点,用于计算元素排名    unsigned long span;} level[];</code></pre>} zskiplistNode;<pre class="language-none"><code class="language-none">- ```c  //真正的skiplist结构  typedef struct zskiplist {      struct zskiplistNode *header, *tail;      unsigned long length;//链表长度,头指针为空,不算在计数中      int level;//总层数  } zskiplist;</code></pre></li></ul></li><li><p>层数随机决定(1-32,幂次随机算法)</p></li><li><p>分值可以相同,但是对应成员必须不一样</p></li></ul><h3 id="intset"><a href="#intset" class="headerlink" title="intset"></a>intset</h3><ul><li><p>不会出现重复元素</p></li><li><p>结构:</p><ul><li>```c<br>//由整数组成的有序集合,便于在上面进行二分查找，用于快速地判断一个元素是否属于这个集合<br>typedef struct intset {<pre><code>//整个统一的数据编码，表示intset中的每个数据元素用几个字节来存储//intset中存储的整数最多只能占用64bit//随着数据添加,可能改变数据编码,比如一些比较大的整数uint32_t encoding;//inset中的元素个数uint32_t length;//一个柔性数组,长度等于encoding * length,用于表达偏移量//contents需要单独为其分配空间，这部分内存不包含在intset结构当中int8_t contents[];</code></pre>} intset;<pre class="language-none"><code class="language-none">- 当原来的encoding大小不够新的数据存储时,需要升级数据编码  - 先扩充整个集合底层数组大小,分配新元素空间  - 原来的数据类型转换  - 添加新元素(一般来说新元素都在开头或者末尾位置)- 有点像数组的排列,中间插入元素需要整个向后移动,修改代价比较高### ziplist- 列表键只包含少量列表键,值的储存是变长的- 将表中每一项存放在前后连续的地址空间内，一个ziplist整体占用一大块内存- 结构:  - 源代码：        ```c    typedef struct {        /* When string is used, it is provided with the length (slen). */        unsigned char *sval;        unsigned int slen;        /* When integer is used, 'sval' is NULL, and lval holds the value. */        long long lval;    } ziplistEntry;    //ziplist的数据类型，没有用自定义的struct之类的来表达，    //而就是简单的unsigned char *。    //这是因为ziplist本质上就是一块连续内存，    //内部组成结构又是一个高度动态的设计（变长编码），也没法用一个固定的数据结构来表达。</code></pre></li><li>zlentry结构：<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* We use this function to receive information about a ziplist entry. * Note that this is not how the data is actually encoded, is just what we * get filled by a function in order to operate more easily. */</span><span class="token comment">//每一个entry的格式</span><span class="token comment">//记录长度是为了方便指针运算确定偏移量</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zlentry</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlensize<span class="token punctuation">;</span> <span class="token comment">/* Bytes used to encode the previous entry len*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlen<span class="token punctuation">;</span>     <span class="token comment">/* Previous entry len. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> lensize<span class="token punctuation">;</span>        <span class="token comment">/* Bytes used to encode this entry type/len.                                    For example strings have a 1, 2 or 5 bytes                                    header. Integers always use a single byte.*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token comment">/* Bytes used to represent the actual entry.                                    For strings this is just the string length                                    while for integers it is 1, 2, 3, 4, 8 or                                    0 (for 4 bit immediate) depending on the                                    number range. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> headersize<span class="token punctuation">;</span>     <span class="token comment">/* prevrawlensize + lensize. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding<span class="token punctuation">;</span>      <span class="token comment">/* Set to ZIP_STR_* or ZIP_INT_* depending on                                    the entry encoding. However for 4 bits                                    immediate integers this can assume a range                                    of values and must be range-checked. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>            <span class="token comment">/* Pointer to the very start of the entry, that                                    is, this points to prev-entry-len field. */</span><span class="token punctuation">}</span> zlentry<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>添加/删除节点的时候很可能出现连锁更新</p></li></ul><h2 id="robj-server-h"><a href="#robj-server-h" class="headerlink" title="robj(server.h)"></a>robj(server.h)</h2><p>对象的类型一般是指value的类型,和key类型无关(key一般都是string)</p><ul><li><p>作用:</p><ul><li>为多种数据类型提供一种统一的表示方式。</li><li>允许同一类型的数据采用不同的内部表示，从而在某些情况下尽量节省内存。</li><li>支持对象共享和引用计数。当对象被共享的时候，只占用一份内存拷贝，进一步节省内存。</li></ul></li><li><p>结构:</p><ul><li>源代码：<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">{</span>    <span class="token comment">//对象的数据类型</span>    <span class="token comment">//可能的取值有5种：OBJ_STRING, OBJ_LIST, OBJ_SET, OBJ_ZSET, OBJ_HASH，</span>    <span class="token comment">//分别对应Redis对外暴露的5种数据结构</span>    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//对象的内部表示方式（也可以称为编码）</span>    <span class="token comment">//可能的取值有10种，即前面代码中的10个OBJ_ENCODING_XXX常量</span>    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//lru算法记录使用的数据</span>    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */</span>    <span class="token comment">//引用计数,允许robj在一定情况下被共享</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    <span class="token comment">//数据指针,指向真正的数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">}</span> robj<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>string对象:</p><ul><li>接收到的value值（string类型）表示成一个type = OBJ_STRING并且encoding = OBJ_ENCODING_RAW的robj对象</li><li>然后在存入内部存储之前先执行一个编码过程，试图将它表示成另一种更节省内存的encoding方式</li></ul></li><li><p>list对象</p><ul><li>一般使用ziplist</li></ul></li><li><p>哈希对象</p><ul><li>使用ziplist或者hashtable</li><li>ziplist:<ul><li>键值对相邻,先压入键再压入值</li><li>直接往尾部添加</li></ul></li><li>hashtable:<ul><li>使用dict实现</li><li>dict的键保存键,值保存值</li></ul></li></ul></li><li><p>集合</p><ul><li>使用intset或者hashtable</li><li>使用hashtable实现时,字典每个键都是一个字符串对象,对应一个集合元素,字典值设为null</li></ul></li><li><p>有序集合</p><ul><li>使用ziplist或者skiplist</li></ul></li><li><p>多态指令:</p><ul><li>根据对象的类型编码决定指令的具体函数与实现方式决定要调用的函数</li><li>执行指令前像检查对应键或者值能否正确执行相关函数指令</li></ul></li><li><p>内存回收</p><ul><li>通过引用计数在适当时候释放对象并回收内存<ul><li>创建时引用数加一</li><li>被新程序使用时引用数加一</li><li>程序不再使用,引用数减一</li><li>引用数变成0,内存释放</li></ul></li></ul></li><li><p>对象共享</p><ul><li>共享就是利用refcount实现的,每多一个共享的就加一</li><li>提前准备了0到9999的字符串对象共享</li></ul></li><li><p>空转时长</p><ul><li>lru记录最后一次被程序访问的时间,当前时间减去lru时间就是空转时长</li><li>(打印空转时长并不会更新lru值)</li><li>当内存比较满时,最先被释放的是lru最早的那些键</li></ul></li></ul><h2 id="数据类型实现"><a href="#数据类型实现" class="headerlink" title="数据类型实现"></a>数据类型实现</h2><h3 id="t-string-c"><a href="#t-string-c" class="headerlink" title="t_string.c"></a>t_string.c</h3><ul><li>setGenericCommand()函数实现了SET,SETEX,PSETEX,SETNX指令<ul><li>expire 定义了 Redis 对象的过期时间</li><li><em>ok_reply 和 abort_reply 决定了命令回复的内容，NX 参数和 XX 参数也会改变回复。</em><ul><li><em>如果 ok_reply 为 NULL ，那么 “+OK” 被返回。如果 abort_reply 为 NULL ，那么 “$-1” 被返回。</em></li></ul></li></ul></li><li>getExpireMillisecondsOrReply()实现了过期处理,从客户请求中处理过期的robj</li><li>parseExtendedStringArgumentsOrReply()判断当前字符串操作指令的有效性</li><li>*getexCommand()*对于GET的多余参数进行处理,和GET不同,这个指令不是仅可读的</li><li>setrangeCommand()函数中感觉有个地方可以优化,sdslen只能为0或者正值,那么可以减少一个地方的判断,少用一个if语句</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3W1H | 关于写博客的反思</title>
      <link href="/2022/01/26/guan-yu-xie-bo-ke-de-si-kao/"/>
      <url>/2022/01/26/guan-yu-xie-bo-ke-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="3W1H-关于写博客的反思"><a href="#3W1H-关于写博客的反思" class="headerlink" title="3W1H | 关于写博客的反思"></a>3W1H | 关于写博客的反思</h1><h2 id="Why？为什么会想起来写博客？"><a href="#Why？为什么会想起来写博客？" class="headerlink" title="Why？为什么会想起来写博客？"></a>Why？为什么会想起来写博客？</h2><p>也就是之前只是做了一个比较粗糙的主页，现在想要丰富一下自己的页面</p><h2 id="What？都写一些什么主题的博客？"><a href="#What？都写一些什么主题的博客？" class="headerlink" title="What？都写一些什么主题的博客？"></a>What？都写一些什么主题的博客？</h2><p>大概就是记录自己学习过程的东西吧，主要做的就是redis方面的</p><h2 id="Who？写出来的博客都是给谁看的？"><a href="#Who？写出来的博客都是给谁看的？" class="headerlink" title="Who？写出来的博客都是给谁看的？"></a>Who？写出来的博客都是给谁看的？</h2><p>更多只是自己学习方面的记录，我觉得有时间摸摸鱼写一下就是很给博客面子了</p><h2 id="How-much？要花多少时间和金钱来运营维护？"><a href="#How-much？要花多少时间和金钱来运营维护？" class="headerlink" title="How much？要花多少时间和金钱来运营维护？"></a>How much？要花多少时间和金钱来运营维护？</h2><p>不准备花多少时间哈哈哈哈哈哈我可能就是心血来潮搞一下而已</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/26/hello-world/"/>
      <url>/2022/01/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
